
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004254  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004400  08004400  00014400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004410  08004410  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08004410  08004410  00014410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004418  08004418  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004418  08004418  00014418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800441c  0800441c  0001441c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          000001f0  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000020c  2000020c  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f65c  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000236f  00000000  00000000  0002f6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000da0  00000000  00000000  00031a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cc0  00000000  00000000  000327b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000250a8  00000000  00000000  00033478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010cf0  00000000  00000000  00058520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e566b  00000000  00000000  00069210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014e87b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000037e8  00000000  00000000  0014e8cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080043e8 	.word	0x080043e8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000020 	.word	0x20000020
 80001e8:	080043e8 	.word	0x080043e8

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <drawPixel>:
#include "../inc/P10.h"

P10ErrorCode drawPixel(Pixel pix, uint8_t *spiFrame16, P10ABMux AB) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	81b8      	strh	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	4613      	mov	r3, r2
 80004fc:	71fb      	strb	r3, [r7, #7]

	P10ErrorCode check = checkPixelData(&pix);
 80004fe:	f107 030c 	add.w	r3, r7, #12
 8000502:	4618      	mov	r0, r3
 8000504:	f000 f987 	bl	8000816 <checkPixelData>
 8000508:	4603      	mov	r3, r0
 800050a:	75fb      	strb	r3, [r7, #23]

	if (check != P10EC_OK) {
 800050c:	7dfb      	ldrb	r3, [r7, #23]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d12e      	bne.n	8000570 <drawPixel+0x80>

	}
	else {

		uint8_t jy = pix.y % 4;
 8000512:	7b7b      	ldrb	r3, [r7, #13]
 8000514:	f003 0303 	and.w	r3, r3, #3
 8000518:	75bb      	strb	r3, [r7, #22]
		if (jy  == AB) {
 800051a:	7dba      	ldrb	r2, [r7, #22]
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	429a      	cmp	r2, r3
 8000520:	d126      	bne.n	8000570 <drawPixel+0x80>
			uint8_t iy = pix.y / 4;
 8000522:	7b7b      	ldrb	r3, [r7, #13]
 8000524:	089b      	lsrs	r3, r3, #2
 8000526:	757b      	strb	r3, [r7, #21]
			uint8_t jx = pix.x % 8;
 8000528:	7b3b      	ldrb	r3, [r7, #12]
 800052a:	f003 0307 	and.w	r3, r3, #7
 800052e:	753b      	strb	r3, [r7, #20]
			uint8_t ix = pix.x / 8;
 8000530:	7b3b      	ldrb	r3, [r7, #12]
 8000532:	08db      	lsrs	r3, r3, #3
 8000534:	74fb      	strb	r3, [r7, #19]

			spiFrame16[ix * 4 + iy] &= ~(1 << (7 - jx));
 8000536:	7cfb      	ldrb	r3, [r7, #19]
 8000538:	009a      	lsls	r2, r3, #2
 800053a:	7d7b      	ldrb	r3, [r7, #21]
 800053c:	4413      	add	r3, r2
 800053e:	461a      	mov	r2, r3
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	4413      	add	r3, r2
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	b25a      	sxtb	r2, r3
 8000548:	7d3b      	ldrb	r3, [r7, #20]
 800054a:	f1c3 0307 	rsb	r3, r3, #7
 800054e:	2101      	movs	r1, #1
 8000550:	fa01 f303 	lsl.w	r3, r1, r3
 8000554:	b25b      	sxtb	r3, r3
 8000556:	43db      	mvns	r3, r3
 8000558:	b25b      	sxtb	r3, r3
 800055a:	4013      	ands	r3, r2
 800055c:	b259      	sxtb	r1, r3
 800055e:	7cfb      	ldrb	r3, [r7, #19]
 8000560:	009a      	lsls	r2, r3, #2
 8000562:	7d7b      	ldrb	r3, [r7, #21]
 8000564:	4413      	add	r3, r2
 8000566:	461a      	mov	r2, r3
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	4413      	add	r3, r2
 800056c:	b2ca      	uxtb	r2, r1
 800056e:	701a      	strb	r2, [r3, #0]

		}

	}

	return check;
 8000570:	7dfb      	ldrb	r3, [r7, #23]
}
 8000572:	4618      	mov	r0, r3
 8000574:	3718      	adds	r7, #24
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <drawPixels>:
		}
	}
	return check;
}	

P10ErrorCode drawPixels(const Pixel *pixAr, uint16_t size, uint8_t *spiFrame16, P10ABMux AB){
 800057a:	b580      	push	{r7, lr}
 800057c:	b086      	sub	sp, #24
 800057e:	af00      	add	r7, sp, #0
 8000580:	60f8      	str	r0, [r7, #12]
 8000582:	607a      	str	r2, [r7, #4]
 8000584:	461a      	mov	r2, r3
 8000586:	460b      	mov	r3, r1
 8000588:	817b      	strh	r3, [r7, #10]
 800058a:	4613      	mov	r3, r2
 800058c:	727b      	strb	r3, [r7, #9]
	P10ErrorCode check = P10EC_OK;
 800058e:	2300      	movs	r3, #0
 8000590:	75fb      	strb	r3, [r7, #23]
	
	if(size != 0){
 8000592:	897b      	ldrh	r3, [r7, #10]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d022      	beq.n	80005de <drawPixels+0x64>
		for(uint16_t i = 0; i < size; i++){
 8000598:	2300      	movs	r3, #0
 800059a:	82bb      	strh	r3, [r7, #20]
 800059c:	e01a      	b.n	80005d4 <drawPixels+0x5a>
			P10ErrorCode pixCheck = drawPixel(pixAr[i], spiFrame16, AB);
 800059e:	8abb      	ldrh	r3, [r7, #20]
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	68fa      	ldr	r2, [r7, #12]
 80005a4:	4413      	add	r3, r2
 80005a6:	7a79      	ldrb	r1, [r7, #9]
 80005a8:	781a      	ldrb	r2, [r3, #0]
 80005aa:	785b      	ldrb	r3, [r3, #1]
 80005ac:	021b      	lsls	r3, r3, #8
 80005ae:	431a      	orrs	r2, r3
 80005b0:	2300      	movs	r3, #0
 80005b2:	f362 030f 	bfi	r3, r2, #0, #16
 80005b6:	460a      	mov	r2, r1
 80005b8:	6879      	ldr	r1, [r7, #4]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f7ff ff98 	bl	80004f0 <drawPixel>
 80005c0:	4603      	mov	r3, r0
 80005c2:	74fb      	strb	r3, [r7, #19]
			if (pixCheck != P10EC_OK) {
 80005c4:	7cfb      	ldrb	r3, [r7, #19]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <drawPixels+0x54>
				check = pixCheck;
 80005ca:	7cfb      	ldrb	r3, [r7, #19]
 80005cc:	75fb      	strb	r3, [r7, #23]
		for(uint16_t i = 0; i < size; i++){
 80005ce:	8abb      	ldrh	r3, [r7, #20]
 80005d0:	3301      	adds	r3, #1
 80005d2:	82bb      	strh	r3, [r7, #20]
 80005d4:	8aba      	ldrh	r2, [r7, #20]
 80005d6:	897b      	ldrh	r3, [r7, #10]
 80005d8:	429a      	cmp	r2, r3
 80005da:	d3e0      	bcc.n	800059e <drawPixels+0x24>
 80005dc:	e001      	b.n	80005e2 <drawPixels+0x68>
			}
		}
	}
	else{
		check = P10EC_EMPTY_ARRAY;
 80005de:	2304      	movs	r3, #4
 80005e0:	75fb      	strb	r3, [r7, #23]
	}
	
	return check;
 80005e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3718      	adds	r7, #24
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <drawRect>:

	return check;
}

P10ErrorCode drawRect(Pixel leftUp, Pixel rightBottom, uint8_t *spiFrame16, P10ABMux AB)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	; 0x28
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	81b8      	strh	r0, [r7, #12]
 80005f4:	8139      	strh	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
 80005f8:	70fb      	strb	r3, [r7, #3]
	P10ErrorCode checkLU = checkPixelData(&leftUp);
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 f909 	bl	8000816 <checkPixelData>
 8000604:	4603      	mov	r3, r0
 8000606:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	P10ErrorCode checkRB = checkPixelData(&rightBottom);
 800060a:	f107 0308 	add.w	r3, r7, #8
 800060e:	4618      	mov	r0, r3
 8000610:	f000 f901 	bl	8000816 <checkPixelData>
 8000614:	4603      	mov	r3, r0
 8000616:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	
	P10ErrorCode check = P10EC_OK;
 800061a:	2300      	movs	r3, #0
 800061c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	

	if (checkLU == P10EC_OK && checkRB == P10EC_OK) {
 8000620:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000624:	2b00      	cmp	r3, #0
 8000626:	f040 80e2 	bne.w	80007ee <drawRect+0x202>
 800062a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800062e:	2b00      	cmp	r3, #0
 8000630:	f040 80dd 	bne.w	80007ee <drawRect+0x202>
		if (rightBottom.x < leftUp.x || leftUp.y < rightBottom.y) {
 8000634:	7a3a      	ldrb	r2, [r7, #8]
 8000636:	7b3b      	ldrb	r3, [r7, #12]
 8000638:	429a      	cmp	r2, r3
 800063a:	d303      	bcc.n	8000644 <drawRect+0x58>
 800063c:	7b7a      	ldrb	r2, [r7, #13]
 800063e:	7a7b      	ldrb	r3, [r7, #9]
 8000640:	429a      	cmp	r2, r3
 8000642:	d203      	bcs.n	800064c <drawRect+0x60>
			check = P10EC_RECT_POINTS_ERROR;
 8000644:	2305      	movs	r3, #5
 8000646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rightBottom.x < leftUp.x || leftUp.y < rightBottom.y) {
 800064a:	e0de      	b.n	800080a <drawRect+0x21e>
		}
		else {
			uint8_t width = rightBottom.x - leftUp.x;
 800064c:	7a3a      	ldrb	r2, [r7, #8]
 800064e:	7b3b      	ldrb	r3, [r7, #12]
 8000650:	1ad3      	subs	r3, r2, r3
 8000652:	f887 3020 	strb.w	r3, [r7, #32]
			uint8_t height = leftUp.y - rightBottom.y;
 8000656:	7b7a      	ldrb	r2, [r7, #13]
 8000658:	7a7b      	ldrb	r3, [r7, #9]
 800065a:	1ad3      	subs	r3, r2, r3
 800065c:	77fb      	strb	r3, [r7, #31]

			for (uint8_t i = 0; i <= width; i++) {
 800065e:	2300      	movs	r3, #0
 8000660:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000664:	e059      	b.n	800071a <drawRect+0x12e>
				uint8_t y[2] = { leftUp.y, rightBottom.y };
 8000666:	7b7b      	ldrb	r3, [r7, #13]
 8000668:	753b      	strb	r3, [r7, #20]
 800066a:	7a7b      	ldrb	r3, [r7, #9]
 800066c:	757b      	strb	r3, [r7, #21]

				for (uint8_t k = 0; k < 2; k++) {
 800066e:	2300      	movs	r3, #0
 8000670:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000674:	e048      	b.n	8000708 <drawRect+0x11c>
					uint8_t jy = y[k] % 4;
 8000676:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800067a:	3328      	adds	r3, #40	; 0x28
 800067c:	443b      	add	r3, r7
 800067e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000682:	f003 0303 	and.w	r3, r3, #3
 8000686:	76bb      	strb	r3, [r7, #26]
					if (jy == AB) {
 8000688:	7eba      	ldrb	r2, [r7, #26]
 800068a:	78fb      	ldrb	r3, [r7, #3]
 800068c:	429a      	cmp	r2, r3
 800068e:	d136      	bne.n	80006fe <drawRect+0x112>
						uint8_t iy = y[k] / 4;
 8000690:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000694:	3328      	adds	r3, #40	; 0x28
 8000696:	443b      	add	r3, r7
 8000698:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800069c:	089b      	lsrs	r3, r3, #2
 800069e:	767b      	strb	r3, [r7, #25]
						uint8_t jx = (leftUp.x + i) % 8;
 80006a0:	7b3a      	ldrb	r2, [r7, #12]
 80006a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80006a6:	4413      	add	r3, r2
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	f003 0307 	and.w	r3, r3, #7
 80006ae:	763b      	strb	r3, [r7, #24]
						uint8_t ix = (leftUp.x + i) / 8;
 80006b0:	7b3b      	ldrb	r3, [r7, #12]
 80006b2:	461a      	mov	r2, r3
 80006b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80006b8:	4413      	add	r3, r2
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	da00      	bge.n	80006c0 <drawRect+0xd4>
 80006be:	3307      	adds	r3, #7
 80006c0:	10db      	asrs	r3, r3, #3
 80006c2:	75fb      	strb	r3, [r7, #23]

						spiFrame16[ix * 4 + iy] &= ~(1 << (7 - jx));
 80006c4:	7dfb      	ldrb	r3, [r7, #23]
 80006c6:	009a      	lsls	r2, r3, #2
 80006c8:	7e7b      	ldrb	r3, [r7, #25]
 80006ca:	4413      	add	r3, r2
 80006cc:	461a      	mov	r2, r3
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4413      	add	r3, r2
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	b25a      	sxtb	r2, r3
 80006d6:	7e3b      	ldrb	r3, [r7, #24]
 80006d8:	f1c3 0307 	rsb	r3, r3, #7
 80006dc:	2101      	movs	r1, #1
 80006de:	fa01 f303 	lsl.w	r3, r1, r3
 80006e2:	b25b      	sxtb	r3, r3
 80006e4:	43db      	mvns	r3, r3
 80006e6:	b25b      	sxtb	r3, r3
 80006e8:	4013      	ands	r3, r2
 80006ea:	b259      	sxtb	r1, r3
 80006ec:	7dfb      	ldrb	r3, [r7, #23]
 80006ee:	009a      	lsls	r2, r3, #2
 80006f0:	7e7b      	ldrb	r3, [r7, #25]
 80006f2:	4413      	add	r3, r2
 80006f4:	461a      	mov	r2, r3
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4413      	add	r3, r2
 80006fa:	b2ca      	uxtb	r2, r1
 80006fc:	701a      	strb	r2, [r3, #0]
				for (uint8_t k = 0; k < 2; k++) {
 80006fe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000702:	3301      	adds	r3, #1
 8000704:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000708:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800070c:	2b01      	cmp	r3, #1
 800070e:	d9b2      	bls.n	8000676 <drawRect+0x8a>
			for (uint8_t i = 0; i <= width; i++) {
 8000710:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000714:	3301      	adds	r3, #1
 8000716:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800071a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800071e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000722:	429a      	cmp	r2, r3
 8000724:	d99f      	bls.n	8000666 <drawRect+0x7a>
					}
				}
			}

			for (uint8_t i = 1; i < height; i++) {
 8000726:	2301      	movs	r3, #1
 8000728:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800072c:	e059      	b.n	80007e2 <drawRect+0x1f6>
				uint8_t x[2] = { leftUp.x, rightBottom.x };
 800072e:	7b3b      	ldrb	r3, [r7, #12]
 8000730:	743b      	strb	r3, [r7, #16]
 8000732:	7a3b      	ldrb	r3, [r7, #8]
 8000734:	747b      	strb	r3, [r7, #17]

				for (uint8_t k = 0; k < 2; k++) {
 8000736:	2300      	movs	r3, #0
 8000738:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800073c:	e048      	b.n	80007d0 <drawRect+0x1e4>
					uint8_t jy = (rightBottom.y + i) % 4;
 800073e:	7a7a      	ldrb	r2, [r7, #9]
 8000740:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000744:	4413      	add	r3, r2
 8000746:	b2db      	uxtb	r3, r3
 8000748:	f003 0303 	and.w	r3, r3, #3
 800074c:	77bb      	strb	r3, [r7, #30]
					if (jy == AB) {
 800074e:	7fba      	ldrb	r2, [r7, #30]
 8000750:	78fb      	ldrb	r3, [r7, #3]
 8000752:	429a      	cmp	r2, r3
 8000754:	d137      	bne.n	80007c6 <drawRect+0x1da>
						uint8_t iy = (rightBottom.y + i) / 4;
 8000756:	7a7b      	ldrb	r3, [r7, #9]
 8000758:	461a      	mov	r2, r3
 800075a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800075e:	4413      	add	r3, r2
 8000760:	2b00      	cmp	r3, #0
 8000762:	da00      	bge.n	8000766 <drawRect+0x17a>
 8000764:	3303      	adds	r3, #3
 8000766:	109b      	asrs	r3, r3, #2
 8000768:	777b      	strb	r3, [r7, #29]
						uint8_t jx = x[k] % 8;
 800076a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800076e:	3328      	adds	r3, #40	; 0x28
 8000770:	443b      	add	r3, r7
 8000772:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000776:	f003 0307 	and.w	r3, r3, #7
 800077a:	773b      	strb	r3, [r7, #28]
						uint8_t ix = x[k] / 8;
 800077c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000780:	3328      	adds	r3, #40	; 0x28
 8000782:	443b      	add	r3, r7
 8000784:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000788:	08db      	lsrs	r3, r3, #3
 800078a:	76fb      	strb	r3, [r7, #27]

						spiFrame16[ix * 4 + iy] &= ~(1 << (7 - jx));
 800078c:	7efb      	ldrb	r3, [r7, #27]
 800078e:	009a      	lsls	r2, r3, #2
 8000790:	7f7b      	ldrb	r3, [r7, #29]
 8000792:	4413      	add	r3, r2
 8000794:	461a      	mov	r2, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4413      	add	r3, r2
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	b25a      	sxtb	r2, r3
 800079e:	7f3b      	ldrb	r3, [r7, #28]
 80007a0:	f1c3 0307 	rsb	r3, r3, #7
 80007a4:	2101      	movs	r1, #1
 80007a6:	fa01 f303 	lsl.w	r3, r1, r3
 80007aa:	b25b      	sxtb	r3, r3
 80007ac:	43db      	mvns	r3, r3
 80007ae:	b25b      	sxtb	r3, r3
 80007b0:	4013      	ands	r3, r2
 80007b2:	b259      	sxtb	r1, r3
 80007b4:	7efb      	ldrb	r3, [r7, #27]
 80007b6:	009a      	lsls	r2, r3, #2
 80007b8:	7f7b      	ldrb	r3, [r7, #29]
 80007ba:	4413      	add	r3, r2
 80007bc:	461a      	mov	r2, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4413      	add	r3, r2
 80007c2:	b2ca      	uxtb	r2, r1
 80007c4:	701a      	strb	r2, [r3, #0]
				for (uint8_t k = 0; k < 2; k++) {
 80007c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80007ca:	3301      	adds	r3, #1
 80007cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80007d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d9b2      	bls.n	800073e <drawRect+0x152>
			for (uint8_t i = 1; i < height; i++) {
 80007d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80007dc:	3301      	adds	r3, #1
 80007de:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80007e2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80007e6:	7ffb      	ldrb	r3, [r7, #31]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d3a0      	bcc.n	800072e <drawRect+0x142>
		if (rightBottom.x < leftUp.x || leftUp.y < rightBottom.y) {
 80007ec:	e00d      	b.n	800080a <drawRect+0x21e>
				}
			}
		}
	}
	else {
		if (checkLU != checkRB) {
 80007ee:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80007f2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d003      	beq.n	8000802 <drawRect+0x216>
			check = P10EC_DATA_RANGE_ERROR;
 80007fa:	2303      	movs	r3, #3
 80007fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000800:	e003      	b.n	800080a <drawRect+0x21e>
		}
		else {
			check = checkLU;
 8000802:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000806:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
	}

	return check;
 800080a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800080e:	4618      	mov	r0, r3
 8000810:	3728      	adds	r7, #40	; 0x28
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <checkPixelData>:
		}
	}
	return check;
}

P10ErrorCode checkPixelData(const Pixel *pix) {
 8000816:	b480      	push	{r7}
 8000818:	b085      	sub	sp, #20
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]

	P10ErrorCode returnValue = P10EC_OK;
 800081e:	2300      	movs	r3, #0
 8000820:	73fb      	strb	r3, [r7, #15]

	if (pix->x < 32 && pix->y < 16) {
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b1f      	cmp	r3, #31
 8000828:	d803      	bhi.n	8000832 <checkPixelData+0x1c>
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	785b      	ldrb	r3, [r3, #1]
 800082e:	2b0f      	cmp	r3, #15
 8000830:	d913      	bls.n	800085a <checkPixelData+0x44>



	}
	else {
		if (pix->x >= 32 && pix->y >= 16) {
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b1f      	cmp	r3, #31
 8000838:	d906      	bls.n	8000848 <checkPixelData+0x32>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	785b      	ldrb	r3, [r3, #1]
 800083e:	2b0f      	cmp	r3, #15
 8000840:	d902      	bls.n	8000848 <checkPixelData+0x32>
			returnValue = P10EC_DATA_RANGE_ERROR;
 8000842:	2303      	movs	r3, #3
 8000844:	73fb      	strb	r3, [r7, #15]
 8000846:	e008      	b.n	800085a <checkPixelData+0x44>
		}
		else
		{
			if (pix->x >= 32) {
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b1f      	cmp	r3, #31
 800084e:	d902      	bls.n	8000856 <checkPixelData+0x40>
				returnValue = P10EC_X_RANGE_ERROR;
 8000850:	2301      	movs	r3, #1
 8000852:	73fb      	strb	r3, [r7, #15]
 8000854:	e001      	b.n	800085a <checkPixelData+0x44>
			}
			else {
				returnValue = P10EC_Y_RANGE_ERROR;
 8000856:	2302      	movs	r3, #2
 8000858:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return returnValue;
 800085a:	7bfb      	ldrb	r3, [r7, #15]
}
 800085c:	4618      	mov	r0, r3
 800085e:	3714      	adds	r7, #20
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <clearScreen>:

void clearScreen(uint8_t *spiFrame16)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < 16; i++) {
 8000870:	2300      	movs	r3, #0
 8000872:	73fb      	strb	r3, [r7, #15]
 8000874:	e007      	b.n	8000886 <clearScreen+0x1e>
		spiFrame16[i] = 0xff;
 8000876:	7bfb      	ldrb	r3, [r7, #15]
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	4413      	add	r3, r2
 800087c:	22ff      	movs	r2, #255	; 0xff
 800087e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 16; i++) {
 8000880:	7bfb      	ldrb	r3, [r7, #15]
 8000882:	3301      	adds	r3, #1
 8000884:	73fb      	strb	r3, [r7, #15]
 8000886:	7bfb      	ldrb	r3, [r7, #15]
 8000888:	2b0f      	cmp	r3, #15
 800088a:	d9f4      	bls.n	8000876 <clearScreen+0xe>
	}
}
 800088c:	bf00      	nop
 800088e:	bf00      	nop
 8000890:	3714      	adds	r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
	...

0800089c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008a2:	463b      	mov	r3, r7
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008ae:	4b21      	ldr	r3, [pc, #132]	; (8000934 <MX_ADC1_Init+0x98>)
 80008b0:	4a21      	ldr	r2, [pc, #132]	; (8000938 <MX_ADC1_Init+0x9c>)
 80008b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008b4:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <MX_ADC1_Init+0x98>)
 80008b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008bc:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <MX_ADC1_Init+0x98>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80008c2:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <MX_ADC1_Init+0x98>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008c8:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <MX_ADC1_Init+0x98>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008ce:	4b19      	ldr	r3, [pc, #100]	; (8000934 <MX_ADC1_Init+0x98>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008d6:	4b17      	ldr	r3, [pc, #92]	; (8000934 <MX_ADC1_Init+0x98>)
 80008d8:	2200      	movs	r2, #0
 80008da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008dc:	4b15      	ldr	r3, [pc, #84]	; (8000934 <MX_ADC1_Init+0x98>)
 80008de:	4a17      	ldr	r2, [pc, #92]	; (800093c <MX_ADC1_Init+0xa0>)
 80008e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_ADC1_Init+0x98>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <MX_ADC1_Init+0x98>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_ADC1_Init+0x98>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_ADC1_Init+0x98>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008fc:	480d      	ldr	r0, [pc, #52]	; (8000934 <MX_ADC1_Init+0x98>)
 80008fe:	f001 fadf 	bl	8001ec0 <HAL_ADC_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000908:	f001 f822 	bl	8001950 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800090c:	2303      	movs	r3, #3
 800090e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000910:	2301      	movs	r3, #1
 8000912:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000914:	2300      	movs	r3, #0
 8000916:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000918:	463b      	mov	r3, r7
 800091a:	4619      	mov	r1, r3
 800091c:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_ADC1_Init+0x98>)
 800091e:	f001 fc89 	bl	8002234 <HAL_ADC_ConfigChannel>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000928:	f001 f812 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000038 	.word	0x20000038
 8000938:	40012000 	.word	0x40012000
 800093c:	0f000001 	.word	0x0f000001

08000940 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000946:	463b      	mov	r3, r7
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000952:	4b21      	ldr	r3, [pc, #132]	; (80009d8 <MX_ADC2_Init+0x98>)
 8000954:	4a21      	ldr	r2, [pc, #132]	; (80009dc <MX_ADC2_Init+0x9c>)
 8000956:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000958:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <MX_ADC2_Init+0x98>)
 800095a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800095e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000960:	4b1d      	ldr	r3, [pc, #116]	; (80009d8 <MX_ADC2_Init+0x98>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000966:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <MX_ADC2_Init+0x98>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800096c:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <MX_ADC2_Init+0x98>)
 800096e:	2200      	movs	r2, #0
 8000970:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000972:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <MX_ADC2_Init+0x98>)
 8000974:	2200      	movs	r2, #0
 8000976:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800097a:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <MX_ADC2_Init+0x98>)
 800097c:	2200      	movs	r2, #0
 800097e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000980:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <MX_ADC2_Init+0x98>)
 8000982:	4a17      	ldr	r2, [pc, #92]	; (80009e0 <MX_ADC2_Init+0xa0>)
 8000984:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000986:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_ADC2_Init+0x98>)
 8000988:	2200      	movs	r2, #0
 800098a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800098c:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <MX_ADC2_Init+0x98>)
 800098e:	2201      	movs	r2, #1
 8000990:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_ADC2_Init+0x98>)
 8000994:	2200      	movs	r2, #0
 8000996:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800099a:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <MX_ADC2_Init+0x98>)
 800099c:	2201      	movs	r2, #1
 800099e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80009a0:	480d      	ldr	r0, [pc, #52]	; (80009d8 <MX_ADC2_Init+0x98>)
 80009a2:	f001 fa8d 	bl	8001ec0 <HAL_ADC_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80009ac:	f000 ffd0 	bl	8001950 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80009b0:	2306      	movs	r3, #6
 80009b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009b4:	2301      	movs	r3, #1
 80009b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009b8:	2300      	movs	r3, #0
 80009ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80009bc:	463b      	mov	r3, r7
 80009be:	4619      	mov	r1, r3
 80009c0:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_ADC2_Init+0x98>)
 80009c2:	f001 fc37 	bl	8002234 <HAL_ADC_ConfigChannel>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80009cc:	f000 ffc0 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	3710      	adds	r7, #16
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000080 	.word	0x20000080
 80009dc:	40012100 	.word	0x40012100
 80009e0:	0f000001 	.word	0x0f000001

080009e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08c      	sub	sp, #48	; 0x30
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a2e      	ldr	r2, [pc, #184]	; (8000abc <HAL_ADC_MspInit+0xd8>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d128      	bne.n	8000a58 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	61bb      	str	r3, [r7, #24]
 8000a0a:	4b2d      	ldr	r3, [pc, #180]	; (8000ac0 <HAL_ADC_MspInit+0xdc>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	4a2c      	ldr	r2, [pc, #176]	; (8000ac0 <HAL_ADC_MspInit+0xdc>)
 8000a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a14:	6453      	str	r3, [r2, #68]	; 0x44
 8000a16:	4b2a      	ldr	r3, [pc, #168]	; (8000ac0 <HAL_ADC_MspInit+0xdc>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a1e:	61bb      	str	r3, [r7, #24]
 8000a20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	4b26      	ldr	r3, [pc, #152]	; (8000ac0 <HAL_ADC_MspInit+0xdc>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a25      	ldr	r2, [pc, #148]	; (8000ac0 <HAL_ADC_MspInit+0xdc>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b23      	ldr	r3, [pc, #140]	; (8000ac0 <HAL_ADC_MspInit+0xdc>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	617b      	str	r3, [r7, #20]
 8000a3c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a3e:	2308      	movs	r3, #8
 8000a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a42:	2303      	movs	r3, #3
 8000a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	481c      	ldr	r0, [pc, #112]	; (8000ac4 <HAL_ADC_MspInit+0xe0>)
 8000a52:	f001 ff2f 	bl	80028b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000a56:	e02c      	b.n	8000ab2 <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a1a      	ldr	r2, [pc, #104]	; (8000ac8 <HAL_ADC_MspInit+0xe4>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d127      	bne.n	8000ab2 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <HAL_ADC_MspInit+0xdc>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6a:	4a15      	ldr	r2, [pc, #84]	; (8000ac0 <HAL_ADC_MspInit+0xdc>)
 8000a6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a70:	6453      	str	r3, [r2, #68]	; 0x44
 8000a72:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <HAL_ADC_MspInit+0xdc>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <HAL_ADC_MspInit+0xdc>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a0e      	ldr	r2, [pc, #56]	; (8000ac0 <HAL_ADC_MspInit+0xdc>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <HAL_ADC_MspInit+0xdc>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a9a:	2340      	movs	r3, #64	; 0x40
 8000a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <HAL_ADC_MspInit+0xe0>)
 8000aae:	f001 ff01 	bl	80028b4 <HAL_GPIO_Init>
}
 8000ab2:	bf00      	nop
 8000ab4:	3730      	adds	r7, #48	; 0x30
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40012000 	.word	0x40012000
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020000 	.word	0x40020000
 8000ac8:	40012100 	.word	0x40012100

08000acc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08c      	sub	sp, #48	; 0x30
 8000ad0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61bb      	str	r3, [r7, #24]
 8000ae6:	4b4c      	ldr	r3, [pc, #304]	; (8000c18 <MX_GPIO_Init+0x14c>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a4b      	ldr	r2, [pc, #300]	; (8000c18 <MX_GPIO_Init+0x14c>)
 8000aec:	f043 0304 	orr.w	r3, r3, #4
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b49      	ldr	r3, [pc, #292]	; (8000c18 <MX_GPIO_Init+0x14c>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0304 	and.w	r3, r3, #4
 8000afa:	61bb      	str	r3, [r7, #24]
 8000afc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
 8000b02:	4b45      	ldr	r3, [pc, #276]	; (8000c18 <MX_GPIO_Init+0x14c>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a44      	ldr	r2, [pc, #272]	; (8000c18 <MX_GPIO_Init+0x14c>)
 8000b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b42      	ldr	r3, [pc, #264]	; (8000c18 <MX_GPIO_Init+0x14c>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	4b3e      	ldr	r3, [pc, #248]	; (8000c18 <MX_GPIO_Init+0x14c>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a3d      	ldr	r2, [pc, #244]	; (8000c18 <MX_GPIO_Init+0x14c>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b3b      	ldr	r3, [pc, #236]	; (8000c18 <MX_GPIO_Init+0x14c>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	4b37      	ldr	r3, [pc, #220]	; (8000c18 <MX_GPIO_Init+0x14c>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a36      	ldr	r2, [pc, #216]	; (8000c18 <MX_GPIO_Init+0x14c>)
 8000b40:	f043 0310 	orr.w	r3, r3, #16
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b34      	ldr	r3, [pc, #208]	; (8000c18 <MX_GPIO_Init+0x14c>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0310 	and.w	r3, r3, #16
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	4b30      	ldr	r3, [pc, #192]	; (8000c18 <MX_GPIO_Init+0x14c>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a2f      	ldr	r2, [pc, #188]	; (8000c18 <MX_GPIO_Init+0x14c>)
 8000b5c:	f043 0302 	orr.w	r3, r3, #2
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b2d      	ldr	r3, [pc, #180]	; (8000c18 <MX_GPIO_Init+0x14c>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0302 	and.w	r3, r3, #2
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	4b29      	ldr	r3, [pc, #164]	; (8000c18 <MX_GPIO_Init+0x14c>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a28      	ldr	r2, [pc, #160]	; (8000c18 <MX_GPIO_Init+0x14c>)
 8000b78:	f043 0308 	orr.w	r3, r3, #8
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b26      	ldr	r3, [pc, #152]	; (8000c18 <MX_GPIO_Init+0x14c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0308 	and.w	r3, r3, #8
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led_red_Pin|led_blue_Pin, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000b90:	4822      	ldr	r0, [pc, #136]	; (8000c1c <MX_GPIO_Init+0x150>)
 8000b92:	f002 f853 	bl	8002c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, A_Channel_Pin|B_Channel_Pin|SCLK_Pin|nOE_Pin, GPIO_PIN_RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	21f0      	movs	r1, #240	; 0xf0
 8000b9a:	4821      	ldr	r0, [pc, #132]	; (8000c20 <MX_GPIO_Init+0x154>)
 8000b9c:	f002 f84e 	bl	8002c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ba0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	481b      	ldr	r0, [pc, #108]	; (8000c24 <MX_GPIO_Init+0x158>)
 8000bb6:	f001 fe7d 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = button1_Pin;
 8000bba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(button1_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 031c 	add.w	r3, r7, #28
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4816      	ldr	r0, [pc, #88]	; (8000c28 <MX_GPIO_Init+0x15c>)
 8000bd0:	f001 fe70 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = led_red_Pin|led_blue_Pin;
 8000bd4:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be6:	f107 031c 	add.w	r3, r7, #28
 8000bea:	4619      	mov	r1, r3
 8000bec:	480b      	ldr	r0, [pc, #44]	; (8000c1c <MX_GPIO_Init+0x150>)
 8000bee:	f001 fe61 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = A_Channel_Pin|B_Channel_Pin|SCLK_Pin|nOE_Pin;
 8000bf2:	23f0      	movs	r3, #240	; 0xf0
 8000bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	4619      	mov	r1, r3
 8000c08:	4805      	ldr	r0, [pc, #20]	; (8000c20 <MX_GPIO_Init+0x154>)
 8000c0a:	f001 fe53 	bl	80028b4 <HAL_GPIO_Init>

}
 8000c0e:	bf00      	nop
 8000c10:	3730      	adds	r7, #48	; 0x30
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020400 	.word	0x40020400
 8000c20:	40020c00 	.word	0x40020c00
 8000c24:	40020800 	.word	0x40020800
 8000c28:	40021000 	.word	0x40021000

08000c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c30:	f001 f8b0 	bl	8001d94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c34:	f000 fe1c 	bl	8001870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c38:	f7ff ff48 	bl	8000acc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000c3c:	f7ff fe2e 	bl	800089c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000c40:	f001 f804 	bl	8001c4c <MX_TIM1_Init>
  MX_ADC2_Init();
 8000c44:	f7ff fe7c 	bl	8000940 <MX_ADC2_Init>
  MX_SPI1_Init();
 8000c48:	f000 fe88 	bl	800195c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000c4c:	f000 febc 	bl	80019c8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000c50:	488b      	ldr	r0, [pc, #556]	; (8000e80 <main+0x254>)
 8000c52:	f002 ff61 	bl	8003b18 <HAL_TIM_Base_Start_IT>
  //HAL_GPIO_WritePin(GPIOD, SCLK_Pin, GPIO_PIN_SET);
  //HAL_GPIO_WritePin(GPIOD, nOE_Pin, GPIO_PIN_SET);
  //}
  //}

	  buttonstate = HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin);
 8000c56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c5a:	488a      	ldr	r0, [pc, #552]	; (8000e84 <main+0x258>)
 8000c5c:	f001 ffd6 	bl	8002c0c <HAL_GPIO_ReadPin>
 8000c60:	4603      	mov	r3, r0
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	4b88      	ldr	r3, [pc, #544]	; (8000e88 <main+0x25c>)
 8000c66:	801a      	strh	r2, [r3, #0]

	  HAL_ADC_Start_IT(&hadc1);
 8000c68:	4888      	ldr	r0, [pc, #544]	; (8000e8c <main+0x260>)
 8000c6a:	f001 f9f7 	bl	800205c <HAL_ADC_Start_IT>
	  HAL_ADC_Start_IT(&hadc2);
 8000c6e:	4888      	ldr	r0, [pc, #544]	; (8000e90 <main+0x264>)
 8000c70:	f001 f9f4 	bl	800205c <HAL_ADC_Start_IT>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 8000c74:	210a      	movs	r1, #10
 8000c76:	4885      	ldr	r0, [pc, #532]	; (8000e8c <main+0x260>)
 8000c78:	f001 f965 	bl	8001f46 <HAL_ADC_PollForConversion>
	  HAL_ADC_PollForConversion(&hadc2, 10);
 8000c7c:	210a      	movs	r1, #10
 8000c7e:	4884      	ldr	r0, [pc, #528]	; (8000e90 <main+0x264>)
 8000c80:	f001 f961 	bl	8001f46 <HAL_ADC_PollForConversion>
	  AdcX = HAL_ADC_GetValue(&hadc1);
 8000c84:	4881      	ldr	r0, [pc, #516]	; (8000e8c <main+0x260>)
 8000c86:	f001 fac7 	bl	8002218 <HAL_ADC_GetValue>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	4b81      	ldr	r3, [pc, #516]	; (8000e94 <main+0x268>)
 8000c90:	801a      	strh	r2, [r3, #0]
	  AdcY = HAL_ADC_GetValue(&hadc2);
 8000c92:	487f      	ldr	r0, [pc, #508]	; (8000e90 <main+0x264>)
 8000c94:	f001 fac0 	bl	8002218 <HAL_ADC_GetValue>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	b29a      	uxth	r2, r3
 8000c9c:	4b7e      	ldr	r3, [pc, #504]	; (8000e98 <main+0x26c>)
 8000c9e:	801a      	strh	r2, [r3, #0]

	  pix[0].x = a;
 8000ca0:	4b7e      	ldr	r3, [pc, #504]	; (8000e9c <main+0x270>)
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4b7e      	ldr	r3, [pc, #504]	; (8000ea0 <main+0x274>)
 8000ca8:	701a      	strb	r2, [r3, #0]
	  pix[0].y = b;
 8000caa:	4b7e      	ldr	r3, [pc, #504]	; (8000ea4 <main+0x278>)
 8000cac:	881b      	ldrh	r3, [r3, #0]
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	4b7b      	ldr	r3, [pc, #492]	; (8000ea0 <main+0x274>)
 8000cb2:	705a      	strb	r2, [r3, #1]

	  objleftUp.x = m;
 8000cb4:	4b7c      	ldr	r3, [pc, #496]	; (8000ea8 <main+0x27c>)
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4b7c      	ldr	r3, [pc, #496]	; (8000eac <main+0x280>)
 8000cbc:	701a      	strb	r2, [r3, #0]
	  objleftUp.y = n;
 8000cbe:	4b7c      	ldr	r3, [pc, #496]	; (8000eb0 <main+0x284>)
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	4b79      	ldr	r3, [pc, #484]	; (8000eac <main+0x280>)
 8000cc6:	705a      	strb	r2, [r3, #1]

	  objrightBottom.x = m1;
 8000cc8:	4b7a      	ldr	r3, [pc, #488]	; (8000eb4 <main+0x288>)
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4b7a      	ldr	r3, [pc, #488]	; (8000eb8 <main+0x28c>)
 8000cd0:	701a      	strb	r2, [r3, #0]
	  objrightBottom.y = n1;
 8000cd2:	4b7a      	ldr	r3, [pc, #488]	; (8000ebc <main+0x290>)
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b77      	ldr	r3, [pc, #476]	; (8000eb8 <main+0x28c>)
 8000cda:	705a      	strb	r2, [r3, #1]

	  cubeleftUp.x = p;
 8000cdc:	4b78      	ldr	r3, [pc, #480]	; (8000ec0 <main+0x294>)
 8000cde:	881b      	ldrh	r3, [r3, #0]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4b78      	ldr	r3, [pc, #480]	; (8000ec4 <main+0x298>)
 8000ce4:	701a      	strb	r2, [r3, #0]
	  cubeleftUp.y = o;
 8000ce6:	4b78      	ldr	r3, [pc, #480]	; (8000ec8 <main+0x29c>)
 8000ce8:	881b      	ldrh	r3, [r3, #0]
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	4b75      	ldr	r3, [pc, #468]	; (8000ec4 <main+0x298>)
 8000cee:	705a      	strb	r2, [r3, #1]

	  cuberightBottom.x = p1;
 8000cf0:	4b76      	ldr	r3, [pc, #472]	; (8000ecc <main+0x2a0>)
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4b76      	ldr	r3, [pc, #472]	; (8000ed0 <main+0x2a4>)
 8000cf8:	701a      	strb	r2, [r3, #0]
	  cuberightBottom.y = o1;
 8000cfa:	4b76      	ldr	r3, [pc, #472]	; (8000ed4 <main+0x2a8>)
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	4b73      	ldr	r3, [pc, #460]	; (8000ed0 <main+0x2a4>)
 8000d02:	705a      	strb	r2, [r3, #1]

	  if(flag == 1)
 8000d04:	4b74      	ldr	r3, [pc, #464]	; (8000ed8 <main+0x2ac>)
 8000d06:	881b      	ldrh	r3, [r3, #0]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d113      	bne.n	8000d34 <main+0x108>
	  {
        m = a;
 8000d0c:	4b63      	ldr	r3, [pc, #396]	; (8000e9c <main+0x270>)
 8000d0e:	881a      	ldrh	r2, [r3, #0]
 8000d10:	4b65      	ldr	r3, [pc, #404]	; (8000ea8 <main+0x27c>)
 8000d12:	801a      	strh	r2, [r3, #0]
        n = b;
 8000d14:	4b63      	ldr	r3, [pc, #396]	; (8000ea4 <main+0x278>)
 8000d16:	881a      	ldrh	r2, [r3, #0]
 8000d18:	4b65      	ldr	r3, [pc, #404]	; (8000eb0 <main+0x284>)
 8000d1a:	801a      	strh	r2, [r3, #0]
        m1 = a+1;
 8000d1c:	4b5f      	ldr	r3, [pc, #380]	; (8000e9c <main+0x270>)
 8000d1e:	881b      	ldrh	r3, [r3, #0]
 8000d20:	3301      	adds	r3, #1
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	4b63      	ldr	r3, [pc, #396]	; (8000eb4 <main+0x288>)
 8000d26:	801a      	strh	r2, [r3, #0]
        n1 = b-1;
 8000d28:	4b5e      	ldr	r3, [pc, #376]	; (8000ea4 <main+0x278>)
 8000d2a:	881b      	ldrh	r3, [r3, #0]
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	4b62      	ldr	r3, [pc, #392]	; (8000ebc <main+0x290>)
 8000d32:	801a      	strh	r2, [r3, #0]
//	  pixleftUptest.y = 10;

//	  pixrightBottomtest.x = 10;
//	  pixrightBottomtest.y = 5;

      if(b < b1 && a > a1)
 8000d34:	4b5b      	ldr	r3, [pc, #364]	; (8000ea4 <main+0x278>)
 8000d36:	881a      	ldrh	r2, [r3, #0]
 8000d38:	4b68      	ldr	r3, [pc, #416]	; (8000edc <main+0x2b0>)
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d238      	bcs.n	8000db2 <main+0x186>
 8000d40:	4b56      	ldr	r3, [pc, #344]	; (8000e9c <main+0x270>)
 8000d42:	881a      	ldrh	r2, [r3, #0]
 8000d44:	4b66      	ldr	r3, [pc, #408]	; (8000ee0 <main+0x2b4>)
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d932      	bls.n	8000db2 <main+0x186>
      {
    	  pixleftUp.x = a1;
 8000d4c:	4b64      	ldr	r3, [pc, #400]	; (8000ee0 <main+0x2b4>)
 8000d4e:	881b      	ldrh	r3, [r3, #0]
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4b64      	ldr	r3, [pc, #400]	; (8000ee4 <main+0x2b8>)
 8000d54:	701a      	strb	r2, [r3, #0]
    	  pixleftUp.y = b1;
 8000d56:	4b61      	ldr	r3, [pc, #388]	; (8000edc <main+0x2b0>)
 8000d58:	881b      	ldrh	r3, [r3, #0]
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	4b61      	ldr	r3, [pc, #388]	; (8000ee4 <main+0x2b8>)
 8000d5e:	705a      	strb	r2, [r3, #1]

    	  pixrightBottom.x = a;
 8000d60:	4b4e      	ldr	r3, [pc, #312]	; (8000e9c <main+0x270>)
 8000d62:	881b      	ldrh	r3, [r3, #0]
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4b60      	ldr	r3, [pc, #384]	; (8000ee8 <main+0x2bc>)
 8000d68:	701a      	strb	r2, [r3, #0]
    	  pixrightBottom.y = b;
 8000d6a:	4b4e      	ldr	r3, [pc, #312]	; (8000ea4 <main+0x278>)
 8000d6c:	881b      	ldrh	r3, [r3, #0]
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	4b5d      	ldr	r3, [pc, #372]	; (8000ee8 <main+0x2bc>)
 8000d72:	705a      	strb	r2, [r3, #1]

    	  if(a1 < m && b1 > n && a > m1 && b < n1 && buttonstate == 0)
 8000d74:	4b5a      	ldr	r3, [pc, #360]	; (8000ee0 <main+0x2b4>)
 8000d76:	881a      	ldrh	r2, [r3, #0]
 8000d78:	4b4b      	ldr	r3, [pc, #300]	; (8000ea8 <main+0x27c>)
 8000d7a:	881b      	ldrh	r3, [r3, #0]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d218      	bcs.n	8000db2 <main+0x186>
 8000d80:	4b56      	ldr	r3, [pc, #344]	; (8000edc <main+0x2b0>)
 8000d82:	881a      	ldrh	r2, [r3, #0]
 8000d84:	4b4a      	ldr	r3, [pc, #296]	; (8000eb0 <main+0x284>)
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d912      	bls.n	8000db2 <main+0x186>
 8000d8c:	4b43      	ldr	r3, [pc, #268]	; (8000e9c <main+0x270>)
 8000d8e:	881a      	ldrh	r2, [r3, #0]
 8000d90:	4b48      	ldr	r3, [pc, #288]	; (8000eb4 <main+0x288>)
 8000d92:	881b      	ldrh	r3, [r3, #0]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d90c      	bls.n	8000db2 <main+0x186>
 8000d98:	4b42      	ldr	r3, [pc, #264]	; (8000ea4 <main+0x278>)
 8000d9a:	881a      	ldrh	r2, [r3, #0]
 8000d9c:	4b47      	ldr	r3, [pc, #284]	; (8000ebc <main+0x290>)
 8000d9e:	881b      	ldrh	r3, [r3, #0]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d206      	bcs.n	8000db2 <main+0x186>
 8000da4:	4b38      	ldr	r3, [pc, #224]	; (8000e88 <main+0x25c>)
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d102      	bne.n	8000db2 <main+0x186>
    	  {
    		  flag = 1;
 8000dac:	4b4a      	ldr	r3, [pc, #296]	; (8000ed8 <main+0x2ac>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	801a      	strh	r2, [r3, #0]
    	  }
      }

      if(b > b1 && a > a1)
 8000db2:	4b3c      	ldr	r3, [pc, #240]	; (8000ea4 <main+0x278>)
 8000db4:	881a      	ldrh	r2, [r3, #0]
 8000db6:	4b49      	ldr	r3, [pc, #292]	; (8000edc <main+0x2b0>)
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d938      	bls.n	8000e30 <main+0x204>
 8000dbe:	4b37      	ldr	r3, [pc, #220]	; (8000e9c <main+0x270>)
 8000dc0:	881a      	ldrh	r2, [r3, #0]
 8000dc2:	4b47      	ldr	r3, [pc, #284]	; (8000ee0 <main+0x2b4>)
 8000dc4:	881b      	ldrh	r3, [r3, #0]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d932      	bls.n	8000e30 <main+0x204>
      {
    	  pixleftUp.x = a1;
 8000dca:	4b45      	ldr	r3, [pc, #276]	; (8000ee0 <main+0x2b4>)
 8000dcc:	881b      	ldrh	r3, [r3, #0]
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	4b44      	ldr	r3, [pc, #272]	; (8000ee4 <main+0x2b8>)
 8000dd2:	701a      	strb	r2, [r3, #0]
    	  pixleftUp.y = b;
 8000dd4:	4b33      	ldr	r3, [pc, #204]	; (8000ea4 <main+0x278>)
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	4b42      	ldr	r3, [pc, #264]	; (8000ee4 <main+0x2b8>)
 8000ddc:	705a      	strb	r2, [r3, #1]

    	  pixrightBottom.x = a;
 8000dde:	4b2f      	ldr	r3, [pc, #188]	; (8000e9c <main+0x270>)
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	4b40      	ldr	r3, [pc, #256]	; (8000ee8 <main+0x2bc>)
 8000de6:	701a      	strb	r2, [r3, #0]
    	  pixrightBottom.y = b1;
 8000de8:	4b3c      	ldr	r3, [pc, #240]	; (8000edc <main+0x2b0>)
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4b3e      	ldr	r3, [pc, #248]	; (8000ee8 <main+0x2bc>)
 8000df0:	705a      	strb	r2, [r3, #1]

    	  if(a1 < m && b > n && a > m1 && b1 < n1 && buttonstate == 0)
 8000df2:	4b3b      	ldr	r3, [pc, #236]	; (8000ee0 <main+0x2b4>)
 8000df4:	881a      	ldrh	r2, [r3, #0]
 8000df6:	4b2c      	ldr	r3, [pc, #176]	; (8000ea8 <main+0x27c>)
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d218      	bcs.n	8000e30 <main+0x204>
 8000dfe:	4b29      	ldr	r3, [pc, #164]	; (8000ea4 <main+0x278>)
 8000e00:	881a      	ldrh	r2, [r3, #0]
 8000e02:	4b2b      	ldr	r3, [pc, #172]	; (8000eb0 <main+0x284>)
 8000e04:	881b      	ldrh	r3, [r3, #0]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d912      	bls.n	8000e30 <main+0x204>
 8000e0a:	4b24      	ldr	r3, [pc, #144]	; (8000e9c <main+0x270>)
 8000e0c:	881a      	ldrh	r2, [r3, #0]
 8000e0e:	4b29      	ldr	r3, [pc, #164]	; (8000eb4 <main+0x288>)
 8000e10:	881b      	ldrh	r3, [r3, #0]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d90c      	bls.n	8000e30 <main+0x204>
 8000e16:	4b31      	ldr	r3, [pc, #196]	; (8000edc <main+0x2b0>)
 8000e18:	881a      	ldrh	r2, [r3, #0]
 8000e1a:	4b28      	ldr	r3, [pc, #160]	; (8000ebc <main+0x290>)
 8000e1c:	881b      	ldrh	r3, [r3, #0]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d206      	bcs.n	8000e30 <main+0x204>
 8000e22:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <main+0x25c>)
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d102      	bne.n	8000e30 <main+0x204>
    	  {
    		  flag = 1;
 8000e2a:	4b2b      	ldr	r3, [pc, #172]	; (8000ed8 <main+0x2ac>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	801a      	strh	r2, [r3, #0]
    	  }
      }

      if(b > b1 && a < a1)
 8000e30:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <main+0x278>)
 8000e32:	881a      	ldrh	r2, [r3, #0]
 8000e34:	4b29      	ldr	r3, [pc, #164]	; (8000edc <main+0x2b0>)
 8000e36:	881b      	ldrh	r3, [r3, #0]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d970      	bls.n	8000f1e <main+0x2f2>
 8000e3c:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <main+0x270>)
 8000e3e:	881a      	ldrh	r2, [r3, #0]
 8000e40:	4b27      	ldr	r3, [pc, #156]	; (8000ee0 <main+0x2b4>)
 8000e42:	881b      	ldrh	r3, [r3, #0]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d26a      	bcs.n	8000f1e <main+0x2f2>
      {
    	  pixleftUp.x = a;
 8000e48:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <main+0x270>)
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4b25      	ldr	r3, [pc, #148]	; (8000ee4 <main+0x2b8>)
 8000e50:	701a      	strb	r2, [r3, #0]
    	  pixleftUp.y = b;
 8000e52:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <main+0x278>)
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	4b22      	ldr	r3, [pc, #136]	; (8000ee4 <main+0x2b8>)
 8000e5a:	705a      	strb	r2, [r3, #1]

    	  pixrightBottom.x = a1;
 8000e5c:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <main+0x2b4>)
 8000e5e:	881b      	ldrh	r3, [r3, #0]
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4b21      	ldr	r3, [pc, #132]	; (8000ee8 <main+0x2bc>)
 8000e64:	701a      	strb	r2, [r3, #0]
    	  pixrightBottom.y = b1;
 8000e66:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <main+0x2b0>)
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ee8 <main+0x2bc>)
 8000e6e:	705a      	strb	r2, [r3, #1]

    	  if(a < m && b > n && a1 > m1 && b1 < n1 && buttonstate == 0)
 8000e70:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <main+0x270>)
 8000e72:	881a      	ldrh	r2, [r3, #0]
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <main+0x27c>)
 8000e76:	881b      	ldrh	r3, [r3, #0]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d250      	bcs.n	8000f1e <main+0x2f2>
 8000e7c:	e036      	b.n	8000eec <main+0x2c0>
 8000e7e:	bf00      	nop
 8000e80:	200001c0 	.word	0x200001c0
 8000e84:	40021000 	.word	0x40021000
 8000e88:	200000d6 	.word	0x200000d6
 8000e8c:	20000038 	.word	0x20000038
 8000e90:	20000080 	.word	0x20000080
 8000e94:	200000e0 	.word	0x200000e0
 8000e98:	200000e2 	.word	0x200000e2
 8000e9c:	20000000 	.word	0x20000000
 8000ea0:	200000e4 	.word	0x200000e4
 8000ea4:	20000002 	.word	0x20000002
 8000ea8:	20000004 	.word	0x20000004
 8000eac:	200000f0 	.word	0x200000f0
 8000eb0:	20000006 	.word	0x20000006
 8000eb4:	20000008 	.word	0x20000008
 8000eb8:	200000f4 	.word	0x200000f4
 8000ebc:	2000000a 	.word	0x2000000a
 8000ec0:	200000cc 	.word	0x200000cc
 8000ec4:	200000f8 	.word	0x200000f8
 8000ec8:	2000000c 	.word	0x2000000c
 8000ecc:	2000000e 	.word	0x2000000e
 8000ed0:	200000fc 	.word	0x200000fc
 8000ed4:	200000ce 	.word	0x200000ce
 8000ed8:	200000d0 	.word	0x200000d0
 8000edc:	200000ca 	.word	0x200000ca
 8000ee0:	200000c8 	.word	0x200000c8
 8000ee4:	200000e8 	.word	0x200000e8
 8000ee8:	200000ec 	.word	0x200000ec
 8000eec:	4b84      	ldr	r3, [pc, #528]	; (8001100 <main+0x4d4>)
 8000eee:	881a      	ldrh	r2, [r3, #0]
 8000ef0:	4b84      	ldr	r3, [pc, #528]	; (8001104 <main+0x4d8>)
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d912      	bls.n	8000f1e <main+0x2f2>
 8000ef8:	4b83      	ldr	r3, [pc, #524]	; (8001108 <main+0x4dc>)
 8000efa:	881a      	ldrh	r2, [r3, #0]
 8000efc:	4b83      	ldr	r3, [pc, #524]	; (800110c <main+0x4e0>)
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d90c      	bls.n	8000f1e <main+0x2f2>
 8000f04:	4b82      	ldr	r3, [pc, #520]	; (8001110 <main+0x4e4>)
 8000f06:	881a      	ldrh	r2, [r3, #0]
 8000f08:	4b82      	ldr	r3, [pc, #520]	; (8001114 <main+0x4e8>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d206      	bcs.n	8000f1e <main+0x2f2>
 8000f10:	4b81      	ldr	r3, [pc, #516]	; (8001118 <main+0x4ec>)
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d102      	bne.n	8000f1e <main+0x2f2>
    	  {
    		  flag = 1;
 8000f18:	4b80      	ldr	r3, [pc, #512]	; (800111c <main+0x4f0>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	801a      	strh	r2, [r3, #0]
    	  }
      }

      if(b < b1 && a < a1)
 8000f1e:	4b78      	ldr	r3, [pc, #480]	; (8001100 <main+0x4d4>)
 8000f20:	881a      	ldrh	r2, [r3, #0]
 8000f22:	4b7b      	ldr	r3, [pc, #492]	; (8001110 <main+0x4e4>)
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d238      	bcs.n	8000f9c <main+0x370>
 8000f2a:	4b7d      	ldr	r3, [pc, #500]	; (8001120 <main+0x4f4>)
 8000f2c:	881a      	ldrh	r2, [r3, #0]
 8000f2e:	4b76      	ldr	r3, [pc, #472]	; (8001108 <main+0x4dc>)
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d232      	bcs.n	8000f9c <main+0x370>
      {
    	  pixleftUp.x = a;
 8000f36:	4b7a      	ldr	r3, [pc, #488]	; (8001120 <main+0x4f4>)
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	4b79      	ldr	r3, [pc, #484]	; (8001124 <main+0x4f8>)
 8000f3e:	701a      	strb	r2, [r3, #0]
    	  pixleftUp.y = b1;
 8000f40:	4b73      	ldr	r3, [pc, #460]	; (8001110 <main+0x4e4>)
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4b77      	ldr	r3, [pc, #476]	; (8001124 <main+0x4f8>)
 8000f48:	705a      	strb	r2, [r3, #1]

    	  pixrightBottom.x = a1;
 8000f4a:	4b6f      	ldr	r3, [pc, #444]	; (8001108 <main+0x4dc>)
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	4b75      	ldr	r3, [pc, #468]	; (8001128 <main+0x4fc>)
 8000f52:	701a      	strb	r2, [r3, #0]
    	  pixrightBottom.y = b;
 8000f54:	4b6a      	ldr	r3, [pc, #424]	; (8001100 <main+0x4d4>)
 8000f56:	881b      	ldrh	r3, [r3, #0]
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4b73      	ldr	r3, [pc, #460]	; (8001128 <main+0x4fc>)
 8000f5c:	705a      	strb	r2, [r3, #1]

    	  if(a < m && b1 > n && a1 > m1 && b < n1 && buttonstate == 0)
 8000f5e:	4b70      	ldr	r3, [pc, #448]	; (8001120 <main+0x4f4>)
 8000f60:	881a      	ldrh	r2, [r3, #0]
 8000f62:	4b72      	ldr	r3, [pc, #456]	; (800112c <main+0x500>)
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d218      	bcs.n	8000f9c <main+0x370>
 8000f6a:	4b69      	ldr	r3, [pc, #420]	; (8001110 <main+0x4e4>)
 8000f6c:	881a      	ldrh	r2, [r3, #0]
 8000f6e:	4b65      	ldr	r3, [pc, #404]	; (8001104 <main+0x4d8>)
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d912      	bls.n	8000f9c <main+0x370>
 8000f76:	4b64      	ldr	r3, [pc, #400]	; (8001108 <main+0x4dc>)
 8000f78:	881a      	ldrh	r2, [r3, #0]
 8000f7a:	4b64      	ldr	r3, [pc, #400]	; (800110c <main+0x4e0>)
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d90c      	bls.n	8000f9c <main+0x370>
 8000f82:	4b5f      	ldr	r3, [pc, #380]	; (8001100 <main+0x4d4>)
 8000f84:	881a      	ldrh	r2, [r3, #0]
 8000f86:	4b63      	ldr	r3, [pc, #396]	; (8001114 <main+0x4e8>)
 8000f88:	881b      	ldrh	r3, [r3, #0]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d206      	bcs.n	8000f9c <main+0x370>
 8000f8e:	4b62      	ldr	r3, [pc, #392]	; (8001118 <main+0x4ec>)
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d102      	bne.n	8000f9c <main+0x370>
    	  {
    		  flag = 1;
 8000f96:	4b61      	ldr	r3, [pc, #388]	; (800111c <main+0x4f0>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	801a      	strh	r2, [r3, #0]
    	  }
      }


	  delay1++;
 8000f9c:	4b64      	ldr	r3, [pc, #400]	; (8001130 <main+0x504>)
 8000f9e:	881b      	ldrh	r3, [r3, #0]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	4b62      	ldr	r3, [pc, #392]	; (8001130 <main+0x504>)
 8000fa6:	801a      	strh	r2, [r3, #0]

	   if(buttonstate == 0 && button == 0 && z == 0)
 8000fa8:	4b5b      	ldr	r3, [pc, #364]	; (8001118 <main+0x4ec>)
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d11a      	bne.n	8000fe6 <main+0x3ba>
 8000fb0:	4b60      	ldr	r3, [pc, #384]	; (8001134 <main+0x508>)
 8000fb2:	881b      	ldrh	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d116      	bne.n	8000fe6 <main+0x3ba>
 8000fb8:	4b5f      	ldr	r3, [pc, #380]	; (8001138 <main+0x50c>)
 8000fba:	881b      	ldrh	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d112      	bne.n	8000fe6 <main+0x3ba>
	      {
		    if(delay1 > 2000)
 8000fc0:	4b5b      	ldr	r3, [pc, #364]	; (8001130 <main+0x504>)
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000fc8:	d90d      	bls.n	8000fe6 <main+0x3ba>
		    {
		      button=1;
 8000fca:	4b5a      	ldr	r3, [pc, #360]	; (8001134 <main+0x508>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	801a      	strh	r2, [r3, #0]
	    	  a1 = a;
 8000fd0:	4b53      	ldr	r3, [pc, #332]	; (8001120 <main+0x4f4>)
 8000fd2:	881a      	ldrh	r2, [r3, #0]
 8000fd4:	4b4c      	ldr	r3, [pc, #304]	; (8001108 <main+0x4dc>)
 8000fd6:	801a      	strh	r2, [r3, #0]
	    	  b1 = b;
 8000fd8:	4b49      	ldr	r3, [pc, #292]	; (8001100 <main+0x4d4>)
 8000fda:	881a      	ldrh	r2, [r3, #0]
 8000fdc:	4b4c      	ldr	r3, [pc, #304]	; (8001110 <main+0x4e4>)
 8000fde:	801a      	strh	r2, [r3, #0]
		      delay1 = 0;
 8000fe0:	4b53      	ldr	r3, [pc, #332]	; (8001130 <main+0x504>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	801a      	strh	r2, [r3, #0]
		    }

	      }

	   if(buttonstate == 1 && button == 0)
 8000fe6:	4b4c      	ldr	r3, [pc, #304]	; (8001118 <main+0x4ec>)
 8000fe8:	881b      	ldrh	r3, [r3, #0]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d10b      	bne.n	8001006 <main+0x3da>
 8000fee:	4b51      	ldr	r3, [pc, #324]	; (8001134 <main+0x508>)
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d107      	bne.n	8001006 <main+0x3da>
	      {
	    	  a1 = a;
 8000ff6:	4b4a      	ldr	r3, [pc, #296]	; (8001120 <main+0x4f4>)
 8000ff8:	881a      	ldrh	r2, [r3, #0]
 8000ffa:	4b43      	ldr	r3, [pc, #268]	; (8001108 <main+0x4dc>)
 8000ffc:	801a      	strh	r2, [r3, #0]
	    	  b1 = b;
 8000ffe:	4b40      	ldr	r3, [pc, #256]	; (8001100 <main+0x4d4>)
 8001000:	881a      	ldrh	r2, [r3, #0]
 8001002:	4b43      	ldr	r3, [pc, #268]	; (8001110 <main+0x4e4>)
 8001004:	801a      	strh	r2, [r3, #0]
	      }

	   if(buttonstate == 1 && button == 1 && z == 0)
 8001006:	4b44      	ldr	r3, [pc, #272]	; (8001118 <main+0x4ec>)
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d112      	bne.n	8001034 <main+0x408>
 800100e:	4b49      	ldr	r3, [pc, #292]	; (8001134 <main+0x508>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d10e      	bne.n	8001034 <main+0x408>
 8001016:	4b48      	ldr	r3, [pc, #288]	; (8001138 <main+0x50c>)
 8001018:	881b      	ldrh	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d10a      	bne.n	8001034 <main+0x408>
	  	      {
      		    if(delay1 > 2000)
 800101e:	4b44      	ldr	r3, [pc, #272]	; (8001130 <main+0x504>)
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001026:	d905      	bls.n	8001034 <main+0x408>
      		    {
                  z = 1;
 8001028:	4b43      	ldr	r3, [pc, #268]	; (8001138 <main+0x50c>)
 800102a:	2201      	movs	r2, #1
 800102c:	801a      	strh	r2, [r3, #0]
      		      delay1 = 0;
 800102e:	4b40      	ldr	r3, [pc, #256]	; (8001130 <main+0x504>)
 8001030:	2200      	movs	r2, #0
 8001032:	801a      	strh	r2, [r3, #0]
      		    }
	  	      }

	   if(buttonstate == 0 && button == 1 && z == 1)
 8001034:	4b38      	ldr	r3, [pc, #224]	; (8001118 <main+0x4ec>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d11d      	bne.n	8001078 <main+0x44c>
 800103c:	4b3d      	ldr	r3, [pc, #244]	; (8001134 <main+0x508>)
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d119      	bne.n	8001078 <main+0x44c>
 8001044:	4b3c      	ldr	r3, [pc, #240]	; (8001138 <main+0x50c>)
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d115      	bne.n	8001078 <main+0x44c>
	      {
 		    if(delay1 > 2000)
 800104c:	4b38      	ldr	r3, [pc, #224]	; (8001130 <main+0x504>)
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001054:	d910      	bls.n	8001078 <main+0x44c>
 		    {
 		      button=0;
 8001056:	4b37      	ldr	r3, [pc, #220]	; (8001134 <main+0x508>)
 8001058:	2200      	movs	r2, #0
 800105a:	801a      	strh	r2, [r3, #0]
 		      a1 = a;
 800105c:	4b30      	ldr	r3, [pc, #192]	; (8001120 <main+0x4f4>)
 800105e:	881a      	ldrh	r2, [r3, #0]
 8001060:	4b29      	ldr	r3, [pc, #164]	; (8001108 <main+0x4dc>)
 8001062:	801a      	strh	r2, [r3, #0]
 		      b1 = b;
 8001064:	4b26      	ldr	r3, [pc, #152]	; (8001100 <main+0x4d4>)
 8001066:	881a      	ldrh	r2, [r3, #0]
 8001068:	4b29      	ldr	r3, [pc, #164]	; (8001110 <main+0x4e4>)
 800106a:	801a      	strh	r2, [r3, #0]
 		      z = 0;
 800106c:	4b32      	ldr	r3, [pc, #200]	; (8001138 <main+0x50c>)
 800106e:	2200      	movs	r2, #0
 8001070:	801a      	strh	r2, [r3, #0]
 		      delay1 = 0;
 8001072:	4b2f      	ldr	r3, [pc, #188]	; (8001130 <main+0x504>)
 8001074:	2200      	movs	r2, #0
 8001076:	801a      	strh	r2, [r3, #0]
 		    }
	      }

	   if(buttonstate == 0 && ((a == m && b == n) || (a == m1 && b == n1) || (a == m1 && b == (n1 + 1)) || (a == (m1 - 1) && b == n1)) && flag == 0)
 8001078:	4b27      	ldr	r3, [pc, #156]	; (8001118 <main+0x4ec>)
 800107a:	881b      	ldrh	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d168      	bne.n	8001152 <main+0x526>
 8001080:	4b27      	ldr	r3, [pc, #156]	; (8001120 <main+0x4f4>)
 8001082:	881a      	ldrh	r2, [r3, #0]
 8001084:	4b29      	ldr	r3, [pc, #164]	; (800112c <main+0x500>)
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	429a      	cmp	r2, r3
 800108a:	d105      	bne.n	8001098 <main+0x46c>
 800108c:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <main+0x4d4>)
 800108e:	881a      	ldrh	r2, [r3, #0]
 8001090:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <main+0x4d8>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	429a      	cmp	r2, r3
 8001096:	d027      	beq.n	80010e8 <main+0x4bc>
 8001098:	4b21      	ldr	r3, [pc, #132]	; (8001120 <main+0x4f4>)
 800109a:	881a      	ldrh	r2, [r3, #0]
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <main+0x4e0>)
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d105      	bne.n	80010b0 <main+0x484>
 80010a4:	4b16      	ldr	r3, [pc, #88]	; (8001100 <main+0x4d4>)
 80010a6:	881a      	ldrh	r2, [r3, #0]
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <main+0x4e8>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d01b      	beq.n	80010e8 <main+0x4bc>
 80010b0:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <main+0x4f4>)
 80010b2:	881a      	ldrh	r2, [r3, #0]
 80010b4:	4b15      	ldr	r3, [pc, #84]	; (800110c <main+0x4e0>)
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d107      	bne.n	80010cc <main+0x4a0>
 80010bc:	4b10      	ldr	r3, [pc, #64]	; (8001100 <main+0x4d4>)
 80010be:	881b      	ldrh	r3, [r3, #0]
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b14      	ldr	r3, [pc, #80]	; (8001114 <main+0x4e8>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	3301      	adds	r3, #1
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d00d      	beq.n	80010e8 <main+0x4bc>
 80010cc:	4b14      	ldr	r3, [pc, #80]	; (8001120 <main+0x4f4>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <main+0x4e0>)
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	429a      	cmp	r2, r3
 80010da:	d13a      	bne.n	8001152 <main+0x526>
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <main+0x4d4>)
 80010de:	881a      	ldrh	r2, [r3, #0]
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <main+0x4e8>)
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d134      	bne.n	8001152 <main+0x526>
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <main+0x4f0>)
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d130      	bne.n	8001152 <main+0x526>
	   {
		   button = 0;
 80010f0:	4b10      	ldr	r3, [pc, #64]	; (8001134 <main+0x508>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	801a      	strh	r2, [r3, #0]
	       a1 = a;
 80010f6:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <main+0x4f4>)
 80010f8:	881a      	ldrh	r2, [r3, #0]
 80010fa:	4b03      	ldr	r3, [pc, #12]	; (8001108 <main+0x4dc>)
 80010fc:	801a      	strh	r2, [r3, #0]
 80010fe:	e01d      	b.n	800113c <main+0x510>
 8001100:	20000002 	.word	0x20000002
 8001104:	20000006 	.word	0x20000006
 8001108:	200000c8 	.word	0x200000c8
 800110c:	20000008 	.word	0x20000008
 8001110:	200000ca 	.word	0x200000ca
 8001114:	2000000a 	.word	0x2000000a
 8001118:	200000d6 	.word	0x200000d6
 800111c:	200000d0 	.word	0x200000d0
 8001120:	20000000 	.word	0x20000000
 8001124:	200000e8 	.word	0x200000e8
 8001128:	200000ec 	.word	0x200000ec
 800112c:	20000004 	.word	0x20000004
 8001130:	200000dc 	.word	0x200000dc
 8001134:	200000d8 	.word	0x200000d8
 8001138:	200000d4 	.word	0x200000d4
	       b1 = b;
 800113c:	4b92      	ldr	r3, [pc, #584]	; (8001388 <main+0x75c>)
 800113e:	881a      	ldrh	r2, [r3, #0]
 8001140:	4b92      	ldr	r3, [pc, #584]	; (800138c <main+0x760>)
 8001142:	801a      	strh	r2, [r3, #0]
		   flag = 1;
 8001144:	4b92      	ldr	r3, [pc, #584]	; (8001390 <main+0x764>)
 8001146:	2201      	movs	r2, #1
 8001148:	801a      	strh	r2, [r3, #0]
		   HAL_Delay(500);
 800114a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800114e:	f000 fe93 	bl	8001e78 <HAL_Delay>
	   }

	   if(buttonstate == 1 && ((a == m && b == n) || (a == m1 && b == n1) || (a == m1 && b == (n1 + 1)) || (a == (m1 - 1) && b == n1)) && flag == 1 && flag1 ==0)
 8001152:	4b90      	ldr	r3, [pc, #576]	; (8001394 <main+0x768>)
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d14c      	bne.n	80011f4 <main+0x5c8>
 800115a:	4b8f      	ldr	r3, [pc, #572]	; (8001398 <main+0x76c>)
 800115c:	881a      	ldrh	r2, [r3, #0]
 800115e:	4b8f      	ldr	r3, [pc, #572]	; (800139c <main+0x770>)
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	429a      	cmp	r2, r3
 8001164:	d105      	bne.n	8001172 <main+0x546>
 8001166:	4b88      	ldr	r3, [pc, #544]	; (8001388 <main+0x75c>)
 8001168:	881a      	ldrh	r2, [r3, #0]
 800116a:	4b8d      	ldr	r3, [pc, #564]	; (80013a0 <main+0x774>)
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	429a      	cmp	r2, r3
 8001170:	d027      	beq.n	80011c2 <main+0x596>
 8001172:	4b89      	ldr	r3, [pc, #548]	; (8001398 <main+0x76c>)
 8001174:	881a      	ldrh	r2, [r3, #0]
 8001176:	4b8b      	ldr	r3, [pc, #556]	; (80013a4 <main+0x778>)
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	429a      	cmp	r2, r3
 800117c:	d105      	bne.n	800118a <main+0x55e>
 800117e:	4b82      	ldr	r3, [pc, #520]	; (8001388 <main+0x75c>)
 8001180:	881a      	ldrh	r2, [r3, #0]
 8001182:	4b89      	ldr	r3, [pc, #548]	; (80013a8 <main+0x77c>)
 8001184:	881b      	ldrh	r3, [r3, #0]
 8001186:	429a      	cmp	r2, r3
 8001188:	d01b      	beq.n	80011c2 <main+0x596>
 800118a:	4b83      	ldr	r3, [pc, #524]	; (8001398 <main+0x76c>)
 800118c:	881a      	ldrh	r2, [r3, #0]
 800118e:	4b85      	ldr	r3, [pc, #532]	; (80013a4 <main+0x778>)
 8001190:	881b      	ldrh	r3, [r3, #0]
 8001192:	429a      	cmp	r2, r3
 8001194:	d107      	bne.n	80011a6 <main+0x57a>
 8001196:	4b7c      	ldr	r3, [pc, #496]	; (8001388 <main+0x75c>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	4b82      	ldr	r3, [pc, #520]	; (80013a8 <main+0x77c>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	3301      	adds	r3, #1
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d00d      	beq.n	80011c2 <main+0x596>
 80011a6:	4b7c      	ldr	r3, [pc, #496]	; (8001398 <main+0x76c>)
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	4b7d      	ldr	r3, [pc, #500]	; (80013a4 <main+0x778>)
 80011ae:	881b      	ldrh	r3, [r3, #0]
 80011b0:	3b01      	subs	r3, #1
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d11e      	bne.n	80011f4 <main+0x5c8>
 80011b6:	4b74      	ldr	r3, [pc, #464]	; (8001388 <main+0x75c>)
 80011b8:	881a      	ldrh	r2, [r3, #0]
 80011ba:	4b7b      	ldr	r3, [pc, #492]	; (80013a8 <main+0x77c>)
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d118      	bne.n	80011f4 <main+0x5c8>
 80011c2:	4b73      	ldr	r3, [pc, #460]	; (8001390 <main+0x764>)
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d114      	bne.n	80011f4 <main+0x5c8>
 80011ca:	4b78      	ldr	r3, [pc, #480]	; (80013ac <main+0x780>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d110      	bne.n	80011f4 <main+0x5c8>
	  	   {
		   flag1 = 1;
 80011d2:	4b76      	ldr	r3, [pc, #472]	; (80013ac <main+0x780>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	801a      	strh	r2, [r3, #0]
		   button = 0;
 80011d8:	4b75      	ldr	r3, [pc, #468]	; (80013b0 <main+0x784>)
 80011da:	2200      	movs	r2, #0
 80011dc:	801a      	strh	r2, [r3, #0]
	       a1 = a;
 80011de:	4b6e      	ldr	r3, [pc, #440]	; (8001398 <main+0x76c>)
 80011e0:	881a      	ldrh	r2, [r3, #0]
 80011e2:	4b74      	ldr	r3, [pc, #464]	; (80013b4 <main+0x788>)
 80011e4:	801a      	strh	r2, [r3, #0]
	       b1 = b;
 80011e6:	4b68      	ldr	r3, [pc, #416]	; (8001388 <main+0x75c>)
 80011e8:	881a      	ldrh	r2, [r3, #0]
 80011ea:	4b68      	ldr	r3, [pc, #416]	; (800138c <main+0x760>)
 80011ec:	801a      	strh	r2, [r3, #0]
	  	   HAL_Delay(200);
 80011ee:	20c8      	movs	r0, #200	; 0xc8
 80011f0:	f000 fe42 	bl	8001e78 <HAL_Delay>
	  	   }
	   if(buttonstate == 0 && ((a == m && b == n) || (a == m1 && b == n1) || (a == m1 && b == (n1 + 1)) || (a == (m1 - 1) && b == n1)) && flag1 == 1)
 80011f4:	4b67      	ldr	r3, [pc, #412]	; (8001394 <main+0x768>)
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d14b      	bne.n	8001294 <main+0x668>
 80011fc:	4b66      	ldr	r3, [pc, #408]	; (8001398 <main+0x76c>)
 80011fe:	881a      	ldrh	r2, [r3, #0]
 8001200:	4b66      	ldr	r3, [pc, #408]	; (800139c <main+0x770>)
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d105      	bne.n	8001214 <main+0x5e8>
 8001208:	4b5f      	ldr	r3, [pc, #380]	; (8001388 <main+0x75c>)
 800120a:	881a      	ldrh	r2, [r3, #0]
 800120c:	4b64      	ldr	r3, [pc, #400]	; (80013a0 <main+0x774>)
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	429a      	cmp	r2, r3
 8001212:	d027      	beq.n	8001264 <main+0x638>
 8001214:	4b60      	ldr	r3, [pc, #384]	; (8001398 <main+0x76c>)
 8001216:	881a      	ldrh	r2, [r3, #0]
 8001218:	4b62      	ldr	r3, [pc, #392]	; (80013a4 <main+0x778>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	429a      	cmp	r2, r3
 800121e:	d105      	bne.n	800122c <main+0x600>
 8001220:	4b59      	ldr	r3, [pc, #356]	; (8001388 <main+0x75c>)
 8001222:	881a      	ldrh	r2, [r3, #0]
 8001224:	4b60      	ldr	r3, [pc, #384]	; (80013a8 <main+0x77c>)
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	429a      	cmp	r2, r3
 800122a:	d01b      	beq.n	8001264 <main+0x638>
 800122c:	4b5a      	ldr	r3, [pc, #360]	; (8001398 <main+0x76c>)
 800122e:	881a      	ldrh	r2, [r3, #0]
 8001230:	4b5c      	ldr	r3, [pc, #368]	; (80013a4 <main+0x778>)
 8001232:	881b      	ldrh	r3, [r3, #0]
 8001234:	429a      	cmp	r2, r3
 8001236:	d107      	bne.n	8001248 <main+0x61c>
 8001238:	4b53      	ldr	r3, [pc, #332]	; (8001388 <main+0x75c>)
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	4b5a      	ldr	r3, [pc, #360]	; (80013a8 <main+0x77c>)
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	3301      	adds	r3, #1
 8001244:	429a      	cmp	r2, r3
 8001246:	d00d      	beq.n	8001264 <main+0x638>
 8001248:	4b53      	ldr	r3, [pc, #332]	; (8001398 <main+0x76c>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	461a      	mov	r2, r3
 800124e:	4b55      	ldr	r3, [pc, #340]	; (80013a4 <main+0x778>)
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	3b01      	subs	r3, #1
 8001254:	429a      	cmp	r2, r3
 8001256:	d11d      	bne.n	8001294 <main+0x668>
 8001258:	4b4b      	ldr	r3, [pc, #300]	; (8001388 <main+0x75c>)
 800125a:	881a      	ldrh	r2, [r3, #0]
 800125c:	4b52      	ldr	r3, [pc, #328]	; (80013a8 <main+0x77c>)
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	429a      	cmp	r2, r3
 8001262:	d117      	bne.n	8001294 <main+0x668>
 8001264:	4b51      	ldr	r3, [pc, #324]	; (80013ac <main+0x780>)
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d113      	bne.n	8001294 <main+0x668>
	   	  	   {
	   		   flag = 0;
 800126c:	4b48      	ldr	r3, [pc, #288]	; (8001390 <main+0x764>)
 800126e:	2200      	movs	r2, #0
 8001270:	801a      	strh	r2, [r3, #0]
	   		   flag1 = 0;
 8001272:	4b4e      	ldr	r3, [pc, #312]	; (80013ac <main+0x780>)
 8001274:	2200      	movs	r2, #0
 8001276:	801a      	strh	r2, [r3, #0]
			   button = 0;
 8001278:	4b4d      	ldr	r3, [pc, #308]	; (80013b0 <main+0x784>)
 800127a:	2200      	movs	r2, #0
 800127c:	801a      	strh	r2, [r3, #0]
		       a1 = a;
 800127e:	4b46      	ldr	r3, [pc, #280]	; (8001398 <main+0x76c>)
 8001280:	881a      	ldrh	r2, [r3, #0]
 8001282:	4b4c      	ldr	r3, [pc, #304]	; (80013b4 <main+0x788>)
 8001284:	801a      	strh	r2, [r3, #0]
		       b1 = b;
 8001286:	4b40      	ldr	r3, [pc, #256]	; (8001388 <main+0x75c>)
 8001288:	881a      	ldrh	r2, [r3, #0]
 800128a:	4b40      	ldr	r3, [pc, #256]	; (800138c <main+0x760>)
 800128c:	801a      	strh	r2, [r3, #0]
	   	  	   HAL_Delay(200);
 800128e:	20c8      	movs	r0, #200	; 0xc8
 8001290:	f000 fdf2 	bl	8001e78 <HAL_Delay>
	   	  	   }

	           delay2++;
 8001294:	4b48      	ldr	r3, [pc, #288]	; (80013b8 <main+0x78c>)
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	3301      	adds	r3, #1
 800129a:	b29a      	uxth	r2, r3
 800129c:	4b46      	ldr	r3, [pc, #280]	; (80013b8 <main+0x78c>)
 800129e:	801a      	strh	r2, [r3, #0]


	          clearScreen((uint8_t*)data);
 80012a0:	4846      	ldr	r0, [pc, #280]	; (80013bc <main+0x790>)
 80012a2:	f7ff fae1 	bl	8000868 <clearScreen>
	  	      if(button == 1)
 80012a6:	4b42      	ldr	r3, [pc, #264]	; (80013b0 <main+0x784>)
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d107      	bne.n	80012be <main+0x692>
	  	      {
	  	    	  drawRect(pixleftUp, pixrightBottom, (uint8_t*)data, P10AB_11);
 80012ae:	4944      	ldr	r1, [pc, #272]	; (80013c0 <main+0x794>)
 80012b0:	4844      	ldr	r0, [pc, #272]	; (80013c4 <main+0x798>)
 80012b2:	2300      	movs	r3, #0
 80012b4:	4a41      	ldr	r2, [pc, #260]	; (80013bc <main+0x790>)
 80012b6:	6809      	ldr	r1, [r1, #0]
 80012b8:	6800      	ldr	r0, [r0, #0]
 80012ba:	f7ff f997 	bl	80005ec <drawRect>
	  	      }
	  	      if(flag == 1)
 80012be:	4b34      	ldr	r3, [pc, #208]	; (8001390 <main+0x764>)
 80012c0:	881b      	ldrh	r3, [r3, #0]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d10f      	bne.n	80012e6 <main+0x6ba>
	  	      {
		  	      drawRect(objleftUp, objrightBottom, (uint8_t*)data, P10AB_11);
 80012c6:	4940      	ldr	r1, [pc, #256]	; (80013c8 <main+0x79c>)
 80012c8:	4840      	ldr	r0, [pc, #256]	; (80013cc <main+0x7a0>)
 80012ca:	2300      	movs	r3, #0
 80012cc:	4a3b      	ldr	r2, [pc, #236]	; (80013bc <main+0x790>)
 80012ce:	6809      	ldr	r1, [r1, #0]
 80012d0:	6800      	ldr	r0, [r0, #0]
 80012d2:	f7ff f98b 	bl	80005ec <drawRect>
		  	      drawRect(cubeleftUp, cuberightBottom, (uint8_t*)data, P10AB_11);
 80012d6:	493e      	ldr	r1, [pc, #248]	; (80013d0 <main+0x7a4>)
 80012d8:	483e      	ldr	r0, [pc, #248]	; (80013d4 <main+0x7a8>)
 80012da:	2300      	movs	r3, #0
 80012dc:	4a37      	ldr	r2, [pc, #220]	; (80013bc <main+0x790>)
 80012de:	6809      	ldr	r1, [r1, #0]
 80012e0:	6800      	ldr	r0, [r0, #0]
 80012e2:	f7ff f983 	bl	80005ec <drawRect>
	  	      }
	  	      if(flag == 0)
 80012e6:	4b2a      	ldr	r3, [pc, #168]	; (8001390 <main+0x764>)
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d107      	bne.n	80012fe <main+0x6d2>
	  	      {
		  	      drawRect(objleftUp, objrightBottom, (uint8_t*)data, P10AB_11);
 80012ee:	4936      	ldr	r1, [pc, #216]	; (80013c8 <main+0x79c>)
 80012f0:	4836      	ldr	r0, [pc, #216]	; (80013cc <main+0x7a0>)
 80012f2:	2300      	movs	r3, #0
 80012f4:	4a31      	ldr	r2, [pc, #196]	; (80013bc <main+0x790>)
 80012f6:	6809      	ldr	r1, [r1, #0]
 80012f8:	6800      	ldr	r0, [r0, #0]
 80012fa:	f7ff f977 	bl	80005ec <drawRect>
	  	      }
	  		  drawPixels((Pixel*)pix, 1, (uint8_t*)data, P10AB_11);
 80012fe:	2300      	movs	r3, #0
 8001300:	4a2e      	ldr	r2, [pc, #184]	; (80013bc <main+0x790>)
 8001302:	2101      	movs	r1, #1
 8001304:	4834      	ldr	r0, [pc, #208]	; (80013d8 <main+0x7ac>)
 8001306:	f7ff f938 	bl	800057a <drawPixels>
	  		  HAL_GPIO_WritePin(GPIOD, nOE_Pin, GPIO_PIN_RESET);
 800130a:	2200      	movs	r2, #0
 800130c:	2180      	movs	r1, #128	; 0x80
 800130e:	4833      	ldr	r0, [pc, #204]	; (80013dc <main+0x7b0>)
 8001310:	f001 fc94 	bl	8002c3c <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOD, SCLK_Pin, GPIO_PIN_RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	2140      	movs	r1, #64	; 0x40
 8001318:	4830      	ldr	r0, [pc, #192]	; (80013dc <main+0x7b0>)
 800131a:	f001 fc8f 	bl	8002c3c <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOD, A_Channel_Pin, GPIO_PIN_SET);
 800131e:	2201      	movs	r2, #1
 8001320:	2110      	movs	r1, #16
 8001322:	482e      	ldr	r0, [pc, #184]	; (80013dc <main+0x7b0>)
 8001324:	f001 fc8a 	bl	8002c3c <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOD, B_Channel_Pin, GPIO_PIN_SET);
 8001328:	2201      	movs	r2, #1
 800132a:	2120      	movs	r1, #32
 800132c:	482b      	ldr	r0, [pc, #172]	; (80013dc <main+0x7b0>)
 800132e:	f001 fc85 	bl	8002c3c <HAL_GPIO_WritePin>
	  		  HAL_SPI_Transmit(&hspi2, (uint8_t*)data, 16, 10);
 8001332:	230a      	movs	r3, #10
 8001334:	2210      	movs	r2, #16
 8001336:	4921      	ldr	r1, [pc, #132]	; (80013bc <main+0x790>)
 8001338:	4829      	ldr	r0, [pc, #164]	; (80013e0 <main+0x7b4>)
 800133a:	f002 f996 	bl	800366a <HAL_SPI_Transmit>
	  		  HAL_GPIO_WritePin(GPIOD, SCLK_Pin, GPIO_PIN_SET);
 800133e:	2201      	movs	r2, #1
 8001340:	2140      	movs	r1, #64	; 0x40
 8001342:	4826      	ldr	r0, [pc, #152]	; (80013dc <main+0x7b0>)
 8001344:	f001 fc7a 	bl	8002c3c <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOD, nOE_Pin, GPIO_PIN_SET);
 8001348:	2201      	movs	r2, #1
 800134a:	2180      	movs	r1, #128	; 0x80
 800134c:	4823      	ldr	r0, [pc, #140]	; (80013dc <main+0x7b0>)
 800134e:	f001 fc75 	bl	8002c3c <HAL_GPIO_WritePin>

	  		  clearScreen((uint8_t*)data);
 8001352:	481a      	ldr	r0, [pc, #104]	; (80013bc <main+0x790>)
 8001354:	f7ff fa88 	bl	8000868 <clearScreen>
	  	      if(button == 1)
 8001358:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <main+0x784>)
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d107      	bne.n	8001370 <main+0x744>
	  	      {
	  	    	  drawRect(pixleftUp, pixrightBottom, (uint8_t*)data, P10AB_10);
 8001360:	4917      	ldr	r1, [pc, #92]	; (80013c0 <main+0x794>)
 8001362:	4818      	ldr	r0, [pc, #96]	; (80013c4 <main+0x798>)
 8001364:	2301      	movs	r3, #1
 8001366:	4a15      	ldr	r2, [pc, #84]	; (80013bc <main+0x790>)
 8001368:	6809      	ldr	r1, [r1, #0]
 800136a:	6800      	ldr	r0, [r0, #0]
 800136c:	f7ff f93e 	bl	80005ec <drawRect>
	  	      }
	  	      if(flag == 1)
 8001370:	4b07      	ldr	r3, [pc, #28]	; (8001390 <main+0x764>)
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d13f      	bne.n	80013f8 <main+0x7cc>
	  	      {
		  	      drawRect(objleftUp, objrightBottom, (uint8_t*)data, P10AB_10);
 8001378:	4913      	ldr	r1, [pc, #76]	; (80013c8 <main+0x79c>)
 800137a:	4814      	ldr	r0, [pc, #80]	; (80013cc <main+0x7a0>)
 800137c:	2301      	movs	r3, #1
 800137e:	4a0f      	ldr	r2, [pc, #60]	; (80013bc <main+0x790>)
 8001380:	6809      	ldr	r1, [r1, #0]
 8001382:	6800      	ldr	r0, [r0, #0]
 8001384:	e02e      	b.n	80013e4 <main+0x7b8>
 8001386:	bf00      	nop
 8001388:	20000002 	.word	0x20000002
 800138c:	200000ca 	.word	0x200000ca
 8001390:	200000d0 	.word	0x200000d0
 8001394:	200000d6 	.word	0x200000d6
 8001398:	20000000 	.word	0x20000000
 800139c:	20000004 	.word	0x20000004
 80013a0:	20000006 	.word	0x20000006
 80013a4:	20000008 	.word	0x20000008
 80013a8:	2000000a 	.word	0x2000000a
 80013ac:	200000d2 	.word	0x200000d2
 80013b0:	200000d8 	.word	0x200000d8
 80013b4:	200000c8 	.word	0x200000c8
 80013b8:	200000de 	.word	0x200000de
 80013bc:	20000100 	.word	0x20000100
 80013c0:	200000ec 	.word	0x200000ec
 80013c4:	200000e8 	.word	0x200000e8
 80013c8:	200000f4 	.word	0x200000f4
 80013cc:	200000f0 	.word	0x200000f0
 80013d0:	200000fc 	.word	0x200000fc
 80013d4:	200000f8 	.word	0x200000f8
 80013d8:	200000e4 	.word	0x200000e4
 80013dc:	40020c00 	.word	0x40020c00
 80013e0:	20000168 	.word	0x20000168
 80013e4:	f7ff f902 	bl	80005ec <drawRect>
		  	      drawRect(cubeleftUp, cuberightBottom, (uint8_t*)data, P10AB_10);
 80013e8:	49a4      	ldr	r1, [pc, #656]	; (800167c <main+0xa50>)
 80013ea:	48a5      	ldr	r0, [pc, #660]	; (8001680 <main+0xa54>)
 80013ec:	2301      	movs	r3, #1
 80013ee:	4aa5      	ldr	r2, [pc, #660]	; (8001684 <main+0xa58>)
 80013f0:	6809      	ldr	r1, [r1, #0]
 80013f2:	6800      	ldr	r0, [r0, #0]
 80013f4:	f7ff f8fa 	bl	80005ec <drawRect>
	  	      }
	  	      if(flag == 0)
 80013f8:	4ba3      	ldr	r3, [pc, #652]	; (8001688 <main+0xa5c>)
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d107      	bne.n	8001410 <main+0x7e4>
	  	      {
		  	      drawRect(objleftUp, objrightBottom, (uint8_t*)data, P10AB_10);
 8001400:	49a2      	ldr	r1, [pc, #648]	; (800168c <main+0xa60>)
 8001402:	48a3      	ldr	r0, [pc, #652]	; (8001690 <main+0xa64>)
 8001404:	2301      	movs	r3, #1
 8001406:	4a9f      	ldr	r2, [pc, #636]	; (8001684 <main+0xa58>)
 8001408:	6809      	ldr	r1, [r1, #0]
 800140a:	6800      	ldr	r0, [r0, #0]
 800140c:	f7ff f8ee 	bl	80005ec <drawRect>
	  	      }
	  		  drawPixels((Pixel*)pix, 1, (uint8_t*)data, P10AB_10);
 8001410:	2301      	movs	r3, #1
 8001412:	4a9c      	ldr	r2, [pc, #624]	; (8001684 <main+0xa58>)
 8001414:	2101      	movs	r1, #1
 8001416:	489f      	ldr	r0, [pc, #636]	; (8001694 <main+0xa68>)
 8001418:	f7ff f8af 	bl	800057a <drawPixels>
	  		  HAL_GPIO_WritePin(GPIOD, nOE_Pin, GPIO_PIN_RESET);
 800141c:	2200      	movs	r2, #0
 800141e:	2180      	movs	r1, #128	; 0x80
 8001420:	489d      	ldr	r0, [pc, #628]	; (8001698 <main+0xa6c>)
 8001422:	f001 fc0b 	bl	8002c3c <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOD, SCLK_Pin, GPIO_PIN_RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	2140      	movs	r1, #64	; 0x40
 800142a:	489b      	ldr	r0, [pc, #620]	; (8001698 <main+0xa6c>)
 800142c:	f001 fc06 	bl	8002c3c <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOD, A_Channel_Pin, GPIO_PIN_RESET);
 8001430:	2200      	movs	r2, #0
 8001432:	2110      	movs	r1, #16
 8001434:	4898      	ldr	r0, [pc, #608]	; (8001698 <main+0xa6c>)
 8001436:	f001 fc01 	bl	8002c3c <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOD, B_Channel_Pin, GPIO_PIN_SET);
 800143a:	2201      	movs	r2, #1
 800143c:	2120      	movs	r1, #32
 800143e:	4896      	ldr	r0, [pc, #600]	; (8001698 <main+0xa6c>)
 8001440:	f001 fbfc 	bl	8002c3c <HAL_GPIO_WritePin>
	  		  HAL_SPI_Transmit(&hspi2, (uint8_t*)data, 16, 10);
 8001444:	230a      	movs	r3, #10
 8001446:	2210      	movs	r2, #16
 8001448:	498e      	ldr	r1, [pc, #568]	; (8001684 <main+0xa58>)
 800144a:	4894      	ldr	r0, [pc, #592]	; (800169c <main+0xa70>)
 800144c:	f002 f90d 	bl	800366a <HAL_SPI_Transmit>
	  		  HAL_GPIO_WritePin(GPIOD, SCLK_Pin, GPIO_PIN_SET);
 8001450:	2201      	movs	r2, #1
 8001452:	2140      	movs	r1, #64	; 0x40
 8001454:	4890      	ldr	r0, [pc, #576]	; (8001698 <main+0xa6c>)
 8001456:	f001 fbf1 	bl	8002c3c <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOD, nOE_Pin, GPIO_PIN_SET);
 800145a:	2201      	movs	r2, #1
 800145c:	2180      	movs	r1, #128	; 0x80
 800145e:	488e      	ldr	r0, [pc, #568]	; (8001698 <main+0xa6c>)
 8001460:	f001 fbec 	bl	8002c3c <HAL_GPIO_WritePin>

	  		  clearScreen((uint8_t*)data);
 8001464:	4887      	ldr	r0, [pc, #540]	; (8001684 <main+0xa58>)
 8001466:	f7ff f9ff 	bl	8000868 <clearScreen>
	  	      if(button == 1)
 800146a:	4b8d      	ldr	r3, [pc, #564]	; (80016a0 <main+0xa74>)
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d107      	bne.n	8001482 <main+0x856>
	  	      {
	  	    	  drawRect(pixleftUp, pixrightBottom, (uint8_t*)data, P10AB_01);
 8001472:	498c      	ldr	r1, [pc, #560]	; (80016a4 <main+0xa78>)
 8001474:	488c      	ldr	r0, [pc, #560]	; (80016a8 <main+0xa7c>)
 8001476:	2302      	movs	r3, #2
 8001478:	4a82      	ldr	r2, [pc, #520]	; (8001684 <main+0xa58>)
 800147a:	6809      	ldr	r1, [r1, #0]
 800147c:	6800      	ldr	r0, [r0, #0]
 800147e:	f7ff f8b5 	bl	80005ec <drawRect>
	  	      }
	  	      if(flag == 1)
 8001482:	4b81      	ldr	r3, [pc, #516]	; (8001688 <main+0xa5c>)
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d10f      	bne.n	80014aa <main+0x87e>
	  	      {
		  	      drawRect(objleftUp, objrightBottom, (uint8_t*)data, P10AB_01);
 800148a:	4980      	ldr	r1, [pc, #512]	; (800168c <main+0xa60>)
 800148c:	4880      	ldr	r0, [pc, #512]	; (8001690 <main+0xa64>)
 800148e:	2302      	movs	r3, #2
 8001490:	4a7c      	ldr	r2, [pc, #496]	; (8001684 <main+0xa58>)
 8001492:	6809      	ldr	r1, [r1, #0]
 8001494:	6800      	ldr	r0, [r0, #0]
 8001496:	f7ff f8a9 	bl	80005ec <drawRect>
		  	      drawRect(cubeleftUp, cuberightBottom, (uint8_t*)data, P10AB_01);
 800149a:	4978      	ldr	r1, [pc, #480]	; (800167c <main+0xa50>)
 800149c:	4878      	ldr	r0, [pc, #480]	; (8001680 <main+0xa54>)
 800149e:	2302      	movs	r3, #2
 80014a0:	4a78      	ldr	r2, [pc, #480]	; (8001684 <main+0xa58>)
 80014a2:	6809      	ldr	r1, [r1, #0]
 80014a4:	6800      	ldr	r0, [r0, #0]
 80014a6:	f7ff f8a1 	bl	80005ec <drawRect>
	  	      }
	  	      if(flag == 0)
 80014aa:	4b77      	ldr	r3, [pc, #476]	; (8001688 <main+0xa5c>)
 80014ac:	881b      	ldrh	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d107      	bne.n	80014c2 <main+0x896>
	  	      {
		  	      drawRect(objleftUp, objrightBottom, (uint8_t*)data, P10AB_01);
 80014b2:	4976      	ldr	r1, [pc, #472]	; (800168c <main+0xa60>)
 80014b4:	4876      	ldr	r0, [pc, #472]	; (8001690 <main+0xa64>)
 80014b6:	2302      	movs	r3, #2
 80014b8:	4a72      	ldr	r2, [pc, #456]	; (8001684 <main+0xa58>)
 80014ba:	6809      	ldr	r1, [r1, #0]
 80014bc:	6800      	ldr	r0, [r0, #0]
 80014be:	f7ff f895 	bl	80005ec <drawRect>
	  	      }
	  		  drawPixels((Pixel*)pix, 1, (uint8_t*)data, P10AB_01);
 80014c2:	2302      	movs	r3, #2
 80014c4:	4a6f      	ldr	r2, [pc, #444]	; (8001684 <main+0xa58>)
 80014c6:	2101      	movs	r1, #1
 80014c8:	4872      	ldr	r0, [pc, #456]	; (8001694 <main+0xa68>)
 80014ca:	f7ff f856 	bl	800057a <drawPixels>
	  		  HAL_GPIO_WritePin(GPIOD, nOE_Pin, GPIO_PIN_RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2180      	movs	r1, #128	; 0x80
 80014d2:	4871      	ldr	r0, [pc, #452]	; (8001698 <main+0xa6c>)
 80014d4:	f001 fbb2 	bl	8002c3c <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOD, SCLK_Pin, GPIO_PIN_RESET);
 80014d8:	2200      	movs	r2, #0
 80014da:	2140      	movs	r1, #64	; 0x40
 80014dc:	486e      	ldr	r0, [pc, #440]	; (8001698 <main+0xa6c>)
 80014de:	f001 fbad 	bl	8002c3c <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOD, A_Channel_Pin, GPIO_PIN_SET);
 80014e2:	2201      	movs	r2, #1
 80014e4:	2110      	movs	r1, #16
 80014e6:	486c      	ldr	r0, [pc, #432]	; (8001698 <main+0xa6c>)
 80014e8:	f001 fba8 	bl	8002c3c <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOD, B_Channel_Pin, GPIO_PIN_RESET);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2120      	movs	r1, #32
 80014f0:	4869      	ldr	r0, [pc, #420]	; (8001698 <main+0xa6c>)
 80014f2:	f001 fba3 	bl	8002c3c <HAL_GPIO_WritePin>
	  		  HAL_SPI_Transmit(&hspi2, (uint8_t*)data, 16, 10);
 80014f6:	230a      	movs	r3, #10
 80014f8:	2210      	movs	r2, #16
 80014fa:	4962      	ldr	r1, [pc, #392]	; (8001684 <main+0xa58>)
 80014fc:	4867      	ldr	r0, [pc, #412]	; (800169c <main+0xa70>)
 80014fe:	f002 f8b4 	bl	800366a <HAL_SPI_Transmit>
	  		  HAL_GPIO_WritePin(GPIOD, SCLK_Pin, GPIO_PIN_SET);
 8001502:	2201      	movs	r2, #1
 8001504:	2140      	movs	r1, #64	; 0x40
 8001506:	4864      	ldr	r0, [pc, #400]	; (8001698 <main+0xa6c>)
 8001508:	f001 fb98 	bl	8002c3c <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOD, nOE_Pin, GPIO_PIN_SET);
 800150c:	2201      	movs	r2, #1
 800150e:	2180      	movs	r1, #128	; 0x80
 8001510:	4861      	ldr	r0, [pc, #388]	; (8001698 <main+0xa6c>)
 8001512:	f001 fb93 	bl	8002c3c <HAL_GPIO_WritePin>

	  		  clearScreen((uint8_t*)data);
 8001516:	485b      	ldr	r0, [pc, #364]	; (8001684 <main+0xa58>)
 8001518:	f7ff f9a6 	bl	8000868 <clearScreen>
	  	      if(button == 1)
 800151c:	4b60      	ldr	r3, [pc, #384]	; (80016a0 <main+0xa74>)
 800151e:	881b      	ldrh	r3, [r3, #0]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d107      	bne.n	8001534 <main+0x908>
	  	      {
	  	    	  drawRect(pixleftUp, pixrightBottom, (uint8_t*)data, P10AB_00);
 8001524:	495f      	ldr	r1, [pc, #380]	; (80016a4 <main+0xa78>)
 8001526:	4860      	ldr	r0, [pc, #384]	; (80016a8 <main+0xa7c>)
 8001528:	2303      	movs	r3, #3
 800152a:	4a56      	ldr	r2, [pc, #344]	; (8001684 <main+0xa58>)
 800152c:	6809      	ldr	r1, [r1, #0]
 800152e:	6800      	ldr	r0, [r0, #0]
 8001530:	f7ff f85c 	bl	80005ec <drawRect>
	  	      }
	  	      if(flag == 1)
 8001534:	4b54      	ldr	r3, [pc, #336]	; (8001688 <main+0xa5c>)
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d10f      	bne.n	800155c <main+0x930>
	  	      {
		  	      drawRect(objleftUp, objrightBottom, (uint8_t*)data, P10AB_00);
 800153c:	4953      	ldr	r1, [pc, #332]	; (800168c <main+0xa60>)
 800153e:	4854      	ldr	r0, [pc, #336]	; (8001690 <main+0xa64>)
 8001540:	2303      	movs	r3, #3
 8001542:	4a50      	ldr	r2, [pc, #320]	; (8001684 <main+0xa58>)
 8001544:	6809      	ldr	r1, [r1, #0]
 8001546:	6800      	ldr	r0, [r0, #0]
 8001548:	f7ff f850 	bl	80005ec <drawRect>
		  	      drawRect(cubeleftUp, cuberightBottom, (uint8_t*)data, P10AB_00);
 800154c:	494b      	ldr	r1, [pc, #300]	; (800167c <main+0xa50>)
 800154e:	484c      	ldr	r0, [pc, #304]	; (8001680 <main+0xa54>)
 8001550:	2303      	movs	r3, #3
 8001552:	4a4c      	ldr	r2, [pc, #304]	; (8001684 <main+0xa58>)
 8001554:	6809      	ldr	r1, [r1, #0]
 8001556:	6800      	ldr	r0, [r0, #0]
 8001558:	f7ff f848 	bl	80005ec <drawRect>
	  	      }
	  	      if(flag == 0)
 800155c:	4b4a      	ldr	r3, [pc, #296]	; (8001688 <main+0xa5c>)
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d107      	bne.n	8001574 <main+0x948>
	  	      {
		  	      drawRect(objleftUp, objrightBottom, (uint8_t*)data, P10AB_00);
 8001564:	4949      	ldr	r1, [pc, #292]	; (800168c <main+0xa60>)
 8001566:	484a      	ldr	r0, [pc, #296]	; (8001690 <main+0xa64>)
 8001568:	2303      	movs	r3, #3
 800156a:	4a46      	ldr	r2, [pc, #280]	; (8001684 <main+0xa58>)
 800156c:	6809      	ldr	r1, [r1, #0]
 800156e:	6800      	ldr	r0, [r0, #0]
 8001570:	f7ff f83c 	bl	80005ec <drawRect>
	  	      }
	  		  drawPixels((Pixel*)pix, 1, (uint8_t*)data, P10AB_00);
 8001574:	2303      	movs	r3, #3
 8001576:	4a43      	ldr	r2, [pc, #268]	; (8001684 <main+0xa58>)
 8001578:	2101      	movs	r1, #1
 800157a:	4846      	ldr	r0, [pc, #280]	; (8001694 <main+0xa68>)
 800157c:	f7fe fffd 	bl	800057a <drawPixels>
	  		  HAL_GPIO_WritePin(GPIOD, nOE_Pin, GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	2180      	movs	r1, #128	; 0x80
 8001584:	4844      	ldr	r0, [pc, #272]	; (8001698 <main+0xa6c>)
 8001586:	f001 fb59 	bl	8002c3c <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOD, SCLK_Pin, GPIO_PIN_RESET);
 800158a:	2200      	movs	r2, #0
 800158c:	2140      	movs	r1, #64	; 0x40
 800158e:	4842      	ldr	r0, [pc, #264]	; (8001698 <main+0xa6c>)
 8001590:	f001 fb54 	bl	8002c3c <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOD, A_Channel_Pin, GPIO_PIN_RESET);
 8001594:	2200      	movs	r2, #0
 8001596:	2110      	movs	r1, #16
 8001598:	483f      	ldr	r0, [pc, #252]	; (8001698 <main+0xa6c>)
 800159a:	f001 fb4f 	bl	8002c3c <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOD, B_Channel_Pin, GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	2120      	movs	r1, #32
 80015a2:	483d      	ldr	r0, [pc, #244]	; (8001698 <main+0xa6c>)
 80015a4:	f001 fb4a 	bl	8002c3c <HAL_GPIO_WritePin>
	  		  HAL_SPI_Transmit(&hspi2, (uint8_t*)data, 16, 10);
 80015a8:	230a      	movs	r3, #10
 80015aa:	2210      	movs	r2, #16
 80015ac:	4935      	ldr	r1, [pc, #212]	; (8001684 <main+0xa58>)
 80015ae:	483b      	ldr	r0, [pc, #236]	; (800169c <main+0xa70>)
 80015b0:	f002 f85b 	bl	800366a <HAL_SPI_Transmit>
	  		  HAL_GPIO_WritePin(GPIOD, SCLK_Pin, GPIO_PIN_SET);
 80015b4:	2201      	movs	r2, #1
 80015b6:	2140      	movs	r1, #64	; 0x40
 80015b8:	4837      	ldr	r0, [pc, #220]	; (8001698 <main+0xa6c>)
 80015ba:	f001 fb3f 	bl	8002c3c <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOD, nOE_Pin, GPIO_PIN_SET);
 80015be:	2201      	movs	r2, #1
 80015c0:	2180      	movs	r1, #128	; 0x80
 80015c2:	4835      	ldr	r0, [pc, #212]	; (8001698 <main+0xa6c>)
 80015c4:	f001 fb3a 	bl	8002c3c <HAL_GPIO_WritePin>

      delay++;
 80015c8:	4b38      	ldr	r3, [pc, #224]	; (80016ac <main+0xa80>)
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	3301      	adds	r3, #1
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	4b36      	ldr	r3, [pc, #216]	; (80016ac <main+0xa80>)
 80015d2:	801a      	strh	r2, [r3, #0]

      if (a == 32){
 80015d4:	4b36      	ldr	r3, [pc, #216]	; (80016b0 <main+0xa84>)
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	2b20      	cmp	r3, #32
 80015da:	d102      	bne.n	80015e2 <main+0x9b6>
    	  a=31;
 80015dc:	4b34      	ldr	r3, [pc, #208]	; (80016b0 <main+0xa84>)
 80015de:	221f      	movs	r2, #31
 80015e0:	801a      	strh	r2, [r3, #0]
      }
      if (b == 16){
 80015e2:	4b34      	ldr	r3, [pc, #208]	; (80016b4 <main+0xa88>)
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	2b10      	cmp	r3, #16
 80015e8:	d102      	bne.n	80015f0 <main+0x9c4>
    	  b=15;
 80015ea:	4b32      	ldr	r3, [pc, #200]	; (80016b4 <main+0xa88>)
 80015ec:	220f      	movs	r2, #15
 80015ee:	801a      	strh	r2, [r3, #0]
      }
      if (a > 100){
 80015f0:	4b2f      	ldr	r3, [pc, #188]	; (80016b0 <main+0xa84>)
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	2b64      	cmp	r3, #100	; 0x64
 80015f6:	d902      	bls.n	80015fe <main+0x9d2>
    	  a=0;
 80015f8:	4b2d      	ldr	r3, [pc, #180]	; (80016b0 <main+0xa84>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	801a      	strh	r2, [r3, #0]
      }
      if (b > 100){
 80015fe:	4b2d      	ldr	r3, [pc, #180]	; (80016b4 <main+0xa88>)
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	2b64      	cmp	r3, #100	; 0x64
 8001604:	d902      	bls.n	800160c <main+0x9e0>
    	  b=0;
 8001606:	4b2b      	ldr	r3, [pc, #172]	; (80016b4 <main+0xa88>)
 8001608:	2200      	movs	r2, #0
 800160a:	801a      	strh	r2, [r3, #0]
      }
      if((AdcX > 3180) && (AdcY < 3235 && AdcY > 2700)){ // вправо
 800160c:	4b2a      	ldr	r3, [pc, #168]	; (80016b8 <main+0xa8c>)
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	f640 426c 	movw	r2, #3180	; 0xc6c
 8001614:	4293      	cmp	r3, r2
 8001616:	d919      	bls.n	800164c <main+0xa20>
 8001618:	4b28      	ldr	r3, [pc, #160]	; (80016bc <main+0xa90>)
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	f640 42a2 	movw	r2, #3234	; 0xca2
 8001620:	4293      	cmp	r3, r2
 8001622:	d813      	bhi.n	800164c <main+0xa20>
 8001624:	4b25      	ldr	r3, [pc, #148]	; (80016bc <main+0xa90>)
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	f640 228c 	movw	r2, #2700	; 0xa8c
 800162c:	4293      	cmp	r3, r2
 800162e:	d90d      	bls.n	800164c <main+0xa20>
      if(delay > 1000)
 8001630:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <main+0xa80>)
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001638:	d908      	bls.n	800164c <main+0xa20>
      {
    	  a = a+1;
 800163a:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <main+0xa84>)
 800163c:	881b      	ldrh	r3, [r3, #0]
 800163e:	3301      	adds	r3, #1
 8001640:	b29a      	uxth	r2, r3
 8001642:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <main+0xa84>)
 8001644:	801a      	strh	r2, [r3, #0]
    	  delay = 0;
 8001646:	4b19      	ldr	r3, [pc, #100]	; (80016ac <main+0xa80>)
 8001648:	2200      	movs	r2, #0
 800164a:	801a      	strh	r2, [r3, #0]
      }
      }
      if((AdcX < 2700) && (AdcY < 3235 && AdcY > 2700)){ // влево
 800164c:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <main+0xa8c>)
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	f640 228b 	movw	r2, #2699	; 0xa8b
 8001654:	4293      	cmp	r3, r2
 8001656:	d83c      	bhi.n	80016d2 <main+0xaa6>
 8001658:	4b18      	ldr	r3, [pc, #96]	; (80016bc <main+0xa90>)
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	f640 42a2 	movw	r2, #3234	; 0xca2
 8001660:	4293      	cmp	r3, r2
 8001662:	d836      	bhi.n	80016d2 <main+0xaa6>
 8001664:	4b15      	ldr	r3, [pc, #84]	; (80016bc <main+0xa90>)
 8001666:	881b      	ldrh	r3, [r3, #0]
 8001668:	f640 228c 	movw	r2, #2700	; 0xa8c
 800166c:	4293      	cmp	r3, r2
 800166e:	d930      	bls.n	80016d2 <main+0xaa6>
          if(delay > 1000)
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <main+0xa80>)
 8001672:	881b      	ldrh	r3, [r3, #0]
 8001674:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001678:	d92b      	bls.n	80016d2 <main+0xaa6>
 800167a:	e021      	b.n	80016c0 <main+0xa94>
 800167c:	200000fc 	.word	0x200000fc
 8001680:	200000f8 	.word	0x200000f8
 8001684:	20000100 	.word	0x20000100
 8001688:	200000d0 	.word	0x200000d0
 800168c:	200000f4 	.word	0x200000f4
 8001690:	200000f0 	.word	0x200000f0
 8001694:	200000e4 	.word	0x200000e4
 8001698:	40020c00 	.word	0x40020c00
 800169c:	20000168 	.word	0x20000168
 80016a0:	200000d8 	.word	0x200000d8
 80016a4:	200000ec 	.word	0x200000ec
 80016a8:	200000e8 	.word	0x200000e8
 80016ac:	200000da 	.word	0x200000da
 80016b0:	20000000 	.word	0x20000000
 80016b4:	20000002 	.word	0x20000002
 80016b8:	200000e0 	.word	0x200000e0
 80016bc:	200000e2 	.word	0x200000e2
          {
        	  a = a-1;
 80016c0:	4b66      	ldr	r3, [pc, #408]	; (800185c <main+0xc30>)
 80016c2:	881b      	ldrh	r3, [r3, #0]
 80016c4:	3b01      	subs	r3, #1
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	4b64      	ldr	r3, [pc, #400]	; (800185c <main+0xc30>)
 80016ca:	801a      	strh	r2, [r3, #0]
        	  delay = 0;
 80016cc:	4b64      	ldr	r3, [pc, #400]	; (8001860 <main+0xc34>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	801a      	strh	r2, [r3, #0]
          }
      }
      if((AdcX < 3180 && AdcX > 2700) && (AdcY < 2700)){ // вверх
 80016d2:	4b64      	ldr	r3, [pc, #400]	; (8001864 <main+0xc38>)
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	f640 426b 	movw	r2, #3179	; 0xc6b
 80016da:	4293      	cmp	r3, r2
 80016dc:	d819      	bhi.n	8001712 <main+0xae6>
 80016de:	4b61      	ldr	r3, [pc, #388]	; (8001864 <main+0xc38>)
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	f640 228c 	movw	r2, #2700	; 0xa8c
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d913      	bls.n	8001712 <main+0xae6>
 80016ea:	4b5f      	ldr	r3, [pc, #380]	; (8001868 <main+0xc3c>)
 80016ec:	881b      	ldrh	r3, [r3, #0]
 80016ee:	f640 228b 	movw	r2, #2699	; 0xa8b
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d80d      	bhi.n	8001712 <main+0xae6>
          if(delay > 1000)
 80016f6:	4b5a      	ldr	r3, [pc, #360]	; (8001860 <main+0xc34>)
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016fe:	d908      	bls.n	8001712 <main+0xae6>
          {
        	  b = b+1;
 8001700:	4b5a      	ldr	r3, [pc, #360]	; (800186c <main+0xc40>)
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	3301      	adds	r3, #1
 8001706:	b29a      	uxth	r2, r3
 8001708:	4b58      	ldr	r3, [pc, #352]	; (800186c <main+0xc40>)
 800170a:	801a      	strh	r2, [r3, #0]
        	  delay = 0;
 800170c:	4b54      	ldr	r3, [pc, #336]	; (8001860 <main+0xc34>)
 800170e:	2200      	movs	r2, #0
 8001710:	801a      	strh	r2, [r3, #0]
          }
      }
      if((AdcX < 3180 && AdcX > 2700) && (AdcY > 3235)){ // вниз
 8001712:	4b54      	ldr	r3, [pc, #336]	; (8001864 <main+0xc38>)
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	f640 426b 	movw	r2, #3179	; 0xc6b
 800171a:	4293      	cmp	r3, r2
 800171c:	d819      	bhi.n	8001752 <main+0xb26>
 800171e:	4b51      	ldr	r3, [pc, #324]	; (8001864 <main+0xc38>)
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	f640 228c 	movw	r2, #2700	; 0xa8c
 8001726:	4293      	cmp	r3, r2
 8001728:	d913      	bls.n	8001752 <main+0xb26>
 800172a:	4b4f      	ldr	r3, [pc, #316]	; (8001868 <main+0xc3c>)
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	f640 42a3 	movw	r2, #3235	; 0xca3
 8001732:	4293      	cmp	r3, r2
 8001734:	d90d      	bls.n	8001752 <main+0xb26>
          if(delay > 1000)
 8001736:	4b4a      	ldr	r3, [pc, #296]	; (8001860 <main+0xc34>)
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800173e:	d908      	bls.n	8001752 <main+0xb26>
          {
        	  b = b-1;
 8001740:	4b4a      	ldr	r3, [pc, #296]	; (800186c <main+0xc40>)
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	3b01      	subs	r3, #1
 8001746:	b29a      	uxth	r2, r3
 8001748:	4b48      	ldr	r3, [pc, #288]	; (800186c <main+0xc40>)
 800174a:	801a      	strh	r2, [r3, #0]
        	  delay = 0;
 800174c:	4b44      	ldr	r3, [pc, #272]	; (8001860 <main+0xc34>)
 800174e:	2200      	movs	r2, #0
 8001750:	801a      	strh	r2, [r3, #0]
          }
      }
      if((AdcX > 3180) && (AdcY < 2700)){ // вправо-вверх
 8001752:	4b44      	ldr	r3, [pc, #272]	; (8001864 <main+0xc38>)
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	f640 426c 	movw	r2, #3180	; 0xc6c
 800175a:	4293      	cmp	r3, r2
 800175c:	d919      	bls.n	8001792 <main+0xb66>
 800175e:	4b42      	ldr	r3, [pc, #264]	; (8001868 <main+0xc3c>)
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	f640 228b 	movw	r2, #2699	; 0xa8b
 8001766:	4293      	cmp	r3, r2
 8001768:	d813      	bhi.n	8001792 <main+0xb66>
          if(delay > 1000)
 800176a:	4b3d      	ldr	r3, [pc, #244]	; (8001860 <main+0xc34>)
 800176c:	881b      	ldrh	r3, [r3, #0]
 800176e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001772:	d90e      	bls.n	8001792 <main+0xb66>
          {
              a = a+1;
 8001774:	4b39      	ldr	r3, [pc, #228]	; (800185c <main+0xc30>)
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	3301      	adds	r3, #1
 800177a:	b29a      	uxth	r2, r3
 800177c:	4b37      	ldr	r3, [pc, #220]	; (800185c <main+0xc30>)
 800177e:	801a      	strh	r2, [r3, #0]
              b = b+1;
 8001780:	4b3a      	ldr	r3, [pc, #232]	; (800186c <main+0xc40>)
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	3301      	adds	r3, #1
 8001786:	b29a      	uxth	r2, r3
 8001788:	4b38      	ldr	r3, [pc, #224]	; (800186c <main+0xc40>)
 800178a:	801a      	strh	r2, [r3, #0]
        	  delay = 0;
 800178c:	4b34      	ldr	r3, [pc, #208]	; (8001860 <main+0xc34>)
 800178e:	2200      	movs	r2, #0
 8001790:	801a      	strh	r2, [r3, #0]
          }
      }
      if((AdcX < 2700) && (AdcY < 2700)){ // влево-вверх
 8001792:	4b34      	ldr	r3, [pc, #208]	; (8001864 <main+0xc38>)
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	f640 228b 	movw	r2, #2699	; 0xa8b
 800179a:	4293      	cmp	r3, r2
 800179c:	d819      	bhi.n	80017d2 <main+0xba6>
 800179e:	4b32      	ldr	r3, [pc, #200]	; (8001868 <main+0xc3c>)
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	f640 228b 	movw	r2, #2699	; 0xa8b
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d813      	bhi.n	80017d2 <main+0xba6>
          if(delay > 1000)
 80017aa:	4b2d      	ldr	r3, [pc, #180]	; (8001860 <main+0xc34>)
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017b2:	d90e      	bls.n	80017d2 <main+0xba6>
          {
              a = a-1;
 80017b4:	4b29      	ldr	r3, [pc, #164]	; (800185c <main+0xc30>)
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	3b01      	subs	r3, #1
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	4b27      	ldr	r3, [pc, #156]	; (800185c <main+0xc30>)
 80017be:	801a      	strh	r2, [r3, #0]
              b = b+1;
 80017c0:	4b2a      	ldr	r3, [pc, #168]	; (800186c <main+0xc40>)
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	3301      	adds	r3, #1
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	4b28      	ldr	r3, [pc, #160]	; (800186c <main+0xc40>)
 80017ca:	801a      	strh	r2, [r3, #0]
        	  delay = 0;
 80017cc:	4b24      	ldr	r3, [pc, #144]	; (8001860 <main+0xc34>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	801a      	strh	r2, [r3, #0]
          }
      }
      if((AdcX > 3180) && (AdcY > 3235)){ // вправо-вниз
 80017d2:	4b24      	ldr	r3, [pc, #144]	; (8001864 <main+0xc38>)
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	f640 426c 	movw	r2, #3180	; 0xc6c
 80017da:	4293      	cmp	r3, r2
 80017dc:	d919      	bls.n	8001812 <main+0xbe6>
 80017de:	4b22      	ldr	r3, [pc, #136]	; (8001868 <main+0xc3c>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	f640 42a3 	movw	r2, #3235	; 0xca3
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d913      	bls.n	8001812 <main+0xbe6>
          if(delay > 1000)
 80017ea:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <main+0xc34>)
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017f2:	d90e      	bls.n	8001812 <main+0xbe6>
          {
              a = a+1;
 80017f4:	4b19      	ldr	r3, [pc, #100]	; (800185c <main+0xc30>)
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	3301      	adds	r3, #1
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	4b17      	ldr	r3, [pc, #92]	; (800185c <main+0xc30>)
 80017fe:	801a      	strh	r2, [r3, #0]
              b = b-1;
 8001800:	4b1a      	ldr	r3, [pc, #104]	; (800186c <main+0xc40>)
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	3b01      	subs	r3, #1
 8001806:	b29a      	uxth	r2, r3
 8001808:	4b18      	ldr	r3, [pc, #96]	; (800186c <main+0xc40>)
 800180a:	801a      	strh	r2, [r3, #0]
        	  delay = 0;
 800180c:	4b14      	ldr	r3, [pc, #80]	; (8001860 <main+0xc34>)
 800180e:	2200      	movs	r2, #0
 8001810:	801a      	strh	r2, [r3, #0]
          }
      }
      if((AdcX < 2700) && (AdcY > 3235)){ // влево-вниз
 8001812:	4b14      	ldr	r3, [pc, #80]	; (8001864 <main+0xc38>)
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	f640 228b 	movw	r2, #2699	; 0xa8b
 800181a:	4293      	cmp	r3, r2
 800181c:	f63f aa1b 	bhi.w	8000c56 <main+0x2a>
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <main+0xc3c>)
 8001822:	881b      	ldrh	r3, [r3, #0]
 8001824:	f640 42a3 	movw	r2, #3235	; 0xca3
 8001828:	4293      	cmp	r3, r2
 800182a:	f67f aa14 	bls.w	8000c56 <main+0x2a>
          if(delay > 1000)
 800182e:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <main+0xc34>)
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001836:	f67f aa0e 	bls.w	8000c56 <main+0x2a>
          {
              a = a-1;
 800183a:	4b08      	ldr	r3, [pc, #32]	; (800185c <main+0xc30>)
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	3b01      	subs	r3, #1
 8001840:	b29a      	uxth	r2, r3
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <main+0xc30>)
 8001844:	801a      	strh	r2, [r3, #0]
              b = b-1;
 8001846:	4b09      	ldr	r3, [pc, #36]	; (800186c <main+0xc40>)
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	3b01      	subs	r3, #1
 800184c:	b29a      	uxth	r2, r3
 800184e:	4b07      	ldr	r3, [pc, #28]	; (800186c <main+0xc40>)
 8001850:	801a      	strh	r2, [r3, #0]
        	  delay = 0;
 8001852:	4b03      	ldr	r3, [pc, #12]	; (8001860 <main+0xc34>)
 8001854:	2200      	movs	r2, #0
 8001856:	801a      	strh	r2, [r3, #0]
	  buttonstate = HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin);
 8001858:	f7ff b9fd 	b.w	8000c56 <main+0x2a>
 800185c:	20000000 	.word	0x20000000
 8001860:	200000da 	.word	0x200000da
 8001864:	200000e0 	.word	0x200000e0
 8001868:	200000e2 	.word	0x200000e2
 800186c:	20000002 	.word	0x20000002

08001870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b094      	sub	sp, #80	; 0x50
 8001874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001876:	f107 0320 	add.w	r3, r7, #32
 800187a:	2230      	movs	r2, #48	; 0x30
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f002 fdaa 	bl	80043d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001884:	f107 030c 	add.w	r3, r7, #12
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001894:	2300      	movs	r3, #0
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	4b2b      	ldr	r3, [pc, #172]	; (8001948 <SystemClock_Config+0xd8>)
 800189a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189c:	4a2a      	ldr	r2, [pc, #168]	; (8001948 <SystemClock_Config+0xd8>)
 800189e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a2:	6413      	str	r3, [r2, #64]	; 0x40
 80018a4:	4b28      	ldr	r3, [pc, #160]	; (8001948 <SystemClock_Config+0xd8>)
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018b0:	2300      	movs	r3, #0
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	4b25      	ldr	r3, [pc, #148]	; (800194c <SystemClock_Config+0xdc>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a24      	ldr	r2, [pc, #144]	; (800194c <SystemClock_Config+0xdc>)
 80018ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	4b22      	ldr	r3, [pc, #136]	; (800194c <SystemClock_Config+0xdc>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018cc:	2302      	movs	r3, #2
 80018ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018d0:	2301      	movs	r3, #1
 80018d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018d4:	2310      	movs	r3, #16
 80018d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018d8:	2302      	movs	r3, #2
 80018da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018dc:	2300      	movs	r3, #0
 80018de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018e0:	2308      	movs	r3, #8
 80018e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80018e4:	23b4      	movs	r3, #180	; 0xb4
 80018e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018e8:	2302      	movs	r3, #2
 80018ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018ec:	2304      	movs	r3, #4
 80018ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018f0:	f107 0320 	add.w	r3, r7, #32
 80018f4:	4618      	mov	r0, r3
 80018f6:	f001 fa0b 	bl	8002d10 <HAL_RCC_OscConfig>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001900:	f000 f826 	bl	8001950 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001904:	f001 f9b4 	bl	8002c70 <HAL_PWREx_EnableOverDrive>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800190e:	f000 f81f 	bl	8001950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001912:	230f      	movs	r3, #15
 8001914:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001916:	2302      	movs	r3, #2
 8001918:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800191e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001922:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001928:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800192a:	f107 030c 	add.w	r3, r7, #12
 800192e:	2105      	movs	r1, #5
 8001930:	4618      	mov	r0, r3
 8001932:	f001 fc65 	bl	8003200 <HAL_RCC_ClockConfig>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800193c:	f000 f808 	bl	8001950 <Error_Handler>
  }
}
 8001940:	bf00      	nop
 8001942:	3750      	adds	r7, #80	; 0x50
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40023800 	.word	0x40023800
 800194c:	40007000 	.word	0x40007000

08001950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001954:	b672      	cpsid	i
}
 8001956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001958:	e7fe      	b.n	8001958 <Error_Handler+0x8>
	...

0800195c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001960:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <MX_SPI1_Init+0x64>)
 8001962:	4a18      	ldr	r2, [pc, #96]	; (80019c4 <MX_SPI1_Init+0x68>)
 8001964:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001966:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <MX_SPI1_Init+0x64>)
 8001968:	f44f 7282 	mov.w	r2, #260	; 0x104
 800196c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800196e:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <MX_SPI1_Init+0x64>)
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001974:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <MX_SPI1_Init+0x64>)
 8001976:	2200      	movs	r2, #0
 8001978:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800197a:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <MX_SPI1_Init+0x64>)
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001980:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <MX_SPI1_Init+0x64>)
 8001982:	2200      	movs	r2, #0
 8001984:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <MX_SPI1_Init+0x64>)
 8001988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800198c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <MX_SPI1_Init+0x64>)
 8001990:	2210      	movs	r2, #16
 8001992:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001994:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <MX_SPI1_Init+0x64>)
 8001996:	2200      	movs	r2, #0
 8001998:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <MX_SPI1_Init+0x64>)
 800199c:	2200      	movs	r2, #0
 800199e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019a0:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <MX_SPI1_Init+0x64>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <MX_SPI1_Init+0x64>)
 80019a8:	220a      	movs	r2, #10
 80019aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019ac:	4804      	ldr	r0, [pc, #16]	; (80019c0 <MX_SPI1_Init+0x64>)
 80019ae:	f001 fdd3 	bl	8003558 <HAL_SPI_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019b8:	f7ff ffca 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000110 	.word	0x20000110
 80019c4:	40013000 	.word	0x40013000

080019c8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80019cc:	4b17      	ldr	r3, [pc, #92]	; (8001a2c <MX_SPI2_Init+0x64>)
 80019ce:	4a18      	ldr	r2, [pc, #96]	; (8001a30 <MX_SPI2_Init+0x68>)
 80019d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019d2:	4b16      	ldr	r3, [pc, #88]	; (8001a2c <MX_SPI2_Init+0x64>)
 80019d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019da:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <MX_SPI2_Init+0x64>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019e0:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <MX_SPI2_Init+0x64>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019e6:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <MX_SPI2_Init+0x64>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019ec:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <MX_SPI2_Init+0x64>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80019f2:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <MX_SPI2_Init+0x64>)
 80019f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019f8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80019fa:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <MX_SPI2_Init+0x64>)
 80019fc:	2208      	movs	r2, #8
 80019fe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a00:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <MX_SPI2_Init+0x64>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <MX_SPI2_Init+0x64>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a0c:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <MX_SPI2_Init+0x64>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a12:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <MX_SPI2_Init+0x64>)
 8001a14:	220a      	movs	r2, #10
 8001a16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a18:	4804      	ldr	r0, [pc, #16]	; (8001a2c <MX_SPI2_Init+0x64>)
 8001a1a:	f001 fd9d 	bl	8003558 <HAL_SPI_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001a24:	f7ff ff94 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000168 	.word	0x20000168
 8001a30:	40003800 	.word	0x40003800

08001a34 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08c      	sub	sp, #48	; 0x30
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 031c 	add.w	r3, r7, #28
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a41      	ldr	r2, [pc, #260]	; (8001b58 <HAL_SPI_MspInit+0x124>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d12c      	bne.n	8001ab0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	61bb      	str	r3, [r7, #24]
 8001a5a:	4b40      	ldr	r3, [pc, #256]	; (8001b5c <HAL_SPI_MspInit+0x128>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	4a3f      	ldr	r2, [pc, #252]	; (8001b5c <HAL_SPI_MspInit+0x128>)
 8001a60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a64:	6453      	str	r3, [r2, #68]	; 0x44
 8001a66:	4b3d      	ldr	r3, [pc, #244]	; (8001b5c <HAL_SPI_MspInit+0x128>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a6e:	61bb      	str	r3, [r7, #24]
 8001a70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	4b39      	ldr	r3, [pc, #228]	; (8001b5c <HAL_SPI_MspInit+0x128>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a38      	ldr	r2, [pc, #224]	; (8001b5c <HAL_SPI_MspInit+0x128>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b36      	ldr	r3, [pc, #216]	; (8001b5c <HAL_SPI_MspInit+0x128>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001a8e:	23a0      	movs	r3, #160	; 0xa0
 8001a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a92:	2302      	movs	r3, #2
 8001a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a9e:	2305      	movs	r3, #5
 8001aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa2:	f107 031c 	add.w	r3, r7, #28
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	482d      	ldr	r0, [pc, #180]	; (8001b60 <HAL_SPI_MspInit+0x12c>)
 8001aaa:	f000 ff03 	bl	80028b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001aae:	e04f      	b.n	8001b50 <HAL_SPI_MspInit+0x11c>
  else if(spiHandle->Instance==SPI2)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a2b      	ldr	r2, [pc, #172]	; (8001b64 <HAL_SPI_MspInit+0x130>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d14a      	bne.n	8001b50 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	4b27      	ldr	r3, [pc, #156]	; (8001b5c <HAL_SPI_MspInit+0x128>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	4a26      	ldr	r2, [pc, #152]	; (8001b5c <HAL_SPI_MspInit+0x128>)
 8001ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aca:	4b24      	ldr	r3, [pc, #144]	; (8001b5c <HAL_SPI_MspInit+0x128>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	4b20      	ldr	r3, [pc, #128]	; (8001b5c <HAL_SPI_MspInit+0x128>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a1f      	ldr	r2, [pc, #124]	; (8001b5c <HAL_SPI_MspInit+0x128>)
 8001ae0:	f043 0304 	orr.w	r3, r3, #4
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b1d      	ldr	r3, [pc, #116]	; (8001b5c <HAL_SPI_MspInit+0x128>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <HAL_SPI_MspInit+0x128>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a18      	ldr	r2, [pc, #96]	; (8001b5c <HAL_SPI_MspInit+0x128>)
 8001afc:	f043 0302 	orr.w	r3, r3, #2
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b16      	ldr	r3, [pc, #88]	; (8001b5c <HAL_SPI_MspInit+0x128>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b0e:	2308      	movs	r3, #8
 8001b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b12:	2302      	movs	r3, #2
 8001b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b1e:	2305      	movs	r3, #5
 8001b20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b22:	f107 031c 	add.w	r3, r7, #28
 8001b26:	4619      	mov	r1, r3
 8001b28:	480f      	ldr	r0, [pc, #60]	; (8001b68 <HAL_SPI_MspInit+0x134>)
 8001b2a:	f000 fec3 	bl	80028b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b40:	2305      	movs	r3, #5
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b44:	f107 031c 	add.w	r3, r7, #28
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4808      	ldr	r0, [pc, #32]	; (8001b6c <HAL_SPI_MspInit+0x138>)
 8001b4c:	f000 feb2 	bl	80028b4 <HAL_GPIO_Init>
}
 8001b50:	bf00      	nop
 8001b52:	3730      	adds	r7, #48	; 0x30
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40013000 	.word	0x40013000
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40020000 	.word	0x40020000
 8001b64:	40003800 	.word	0x40003800
 8001b68:	40020800 	.word	0x40020800
 8001b6c:	40020400 	.word	0x40020400

08001b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	607b      	str	r3, [r7, #4]
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <HAL_MspInit+0x4c>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	4a0f      	ldr	r2, [pc, #60]	; (8001bbc <HAL_MspInit+0x4c>)
 8001b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b84:	6453      	str	r3, [r2, #68]	; 0x44
 8001b86:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <HAL_MspInit+0x4c>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	603b      	str	r3, [r7, #0]
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <HAL_MspInit+0x4c>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	4a08      	ldr	r2, [pc, #32]	; (8001bbc <HAL_MspInit+0x4c>)
 8001b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_MspInit+0x4c>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001baa:	603b      	str	r3, [r7, #0]
 8001bac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800

08001bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <NMI_Handler+0x4>

08001bc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bca:	e7fe      	b.n	8001bca <HardFault_Handler+0x4>

08001bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <MemManage_Handler+0x4>

08001bd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd6:	e7fe      	b.n	8001bd6 <BusFault_Handler+0x4>

08001bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bdc:	e7fe      	b.n	8001bdc <UsageFault_Handler+0x4>

08001bde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c0c:	f000 f914 	bl	8001e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c18:	4802      	ldr	r0, [pc, #8]	; (8001c24 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001c1a:	f001 ffed 	bl	8003bf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */



  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	200001c0 	.word	0x200001c0

08001c28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <SystemInit+0x20>)
 8001c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c32:	4a05      	ldr	r2, [pc, #20]	; (8001c48 <SystemInit+0x20>)
 8001c34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c52:	f107 0308 	add.w	r3, r7, #8
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c60:	463b      	mov	r3, r7
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c68:	4b1f      	ldr	r3, [pc, #124]	; (8001ce8 <MX_TIM1_Init+0x9c>)
 8001c6a:	4a20      	ldr	r2, [pc, #128]	; (8001cec <MX_TIM1_Init+0xa0>)
 8001c6c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 8001c6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ce8 <MX_TIM1_Init+0x9c>)
 8001c70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c74:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c76:	4b1c      	ldr	r3, [pc, #112]	; (8001ce8 <MX_TIM1_Init+0x9c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4500-1;
 8001c7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ce8 <MX_TIM1_Init+0x9c>)
 8001c7e:	f241 1293 	movw	r2, #4499	; 0x1193
 8001c82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c84:	4b18      	ldr	r3, [pc, #96]	; (8001ce8 <MX_TIM1_Init+0x9c>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c8a:	4b17      	ldr	r3, [pc, #92]	; (8001ce8 <MX_TIM1_Init+0x9c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c90:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <MX_TIM1_Init+0x9c>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c96:	4814      	ldr	r0, [pc, #80]	; (8001ce8 <MX_TIM1_Init+0x9c>)
 8001c98:	f001 feee 	bl	8003a78 <HAL_TIM_Base_Init>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001ca2:	f7ff fe55 	bl	8001950 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001caa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001cac:	f107 0308 	add.w	r3, r7, #8
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	480d      	ldr	r0, [pc, #52]	; (8001ce8 <MX_TIM1_Init+0x9c>)
 8001cb4:	f002 f8a8 	bl	8003e08 <HAL_TIM_ConfigClockSource>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001cbe:	f7ff fe47 	bl	8001950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cca:	463b      	mov	r3, r7
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4806      	ldr	r0, [pc, #24]	; (8001ce8 <MX_TIM1_Init+0x9c>)
 8001cd0:	f002 face 	bl	8004270 <HAL_TIMEx_MasterConfigSynchronization>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001cda:	f7ff fe39 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001cde:	bf00      	nop
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200001c0 	.word	0x200001c0
 8001cec:	40010000 	.word	0x40010000

08001cf0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a0e      	ldr	r2, [pc, #56]	; (8001d38 <HAL_TIM_Base_MspInit+0x48>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d115      	bne.n	8001d2e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <HAL_TIM_Base_MspInit+0x4c>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	4a0c      	ldr	r2, [pc, #48]	; (8001d3c <HAL_TIM_Base_MspInit+0x4c>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6453      	str	r3, [r2, #68]	; 0x44
 8001d12:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <HAL_TIM_Base_MspInit+0x4c>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2100      	movs	r1, #0
 8001d22:	2019      	movs	r0, #25
 8001d24:	f000 fd8f 	bl	8002846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d28:	2019      	movs	r0, #25
 8001d2a:	f000 fda8 	bl	800287e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001d2e:	bf00      	nop
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40010000 	.word	0x40010000
 8001d3c:	40023800 	.word	0x40023800

08001d40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001d40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d78 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d44:	480d      	ldr	r0, [pc, #52]	; (8001d7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d46:	490e      	ldr	r1, [pc, #56]	; (8001d80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d48:	4a0e      	ldr	r2, [pc, #56]	; (8001d84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d4c:	e002      	b.n	8001d54 <LoopCopyDataInit>

08001d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d52:	3304      	adds	r3, #4

08001d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d58:	d3f9      	bcc.n	8001d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d5a:	4a0b      	ldr	r2, [pc, #44]	; (8001d88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d5c:	4c0b      	ldr	r4, [pc, #44]	; (8001d8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d60:	e001      	b.n	8001d66 <LoopFillZerobss>

08001d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d64:	3204      	adds	r2, #4

08001d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d68:	d3fb      	bcc.n	8001d62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d6a:	f7ff ff5d 	bl	8001c28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d6e:	f002 fb0f 	bl	8004390 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d72:	f7fe ff5b 	bl	8000c2c <main>
  bx  lr    
 8001d76:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001d78:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d80:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001d84:	08004420 	.word	0x08004420
  ldr r2, =_sbss
 8001d88:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001d8c:	2000020c 	.word	0x2000020c

08001d90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d90:	e7fe      	b.n	8001d90 <ADC_IRQHandler>
	...

08001d94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d98:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <HAL_Init+0x40>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a0d      	ldr	r2, [pc, #52]	; (8001dd4 <HAL_Init+0x40>)
 8001d9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001da2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <HAL_Init+0x40>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <HAL_Init+0x40>)
 8001daa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001db0:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <HAL_Init+0x40>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a07      	ldr	r2, [pc, #28]	; (8001dd4 <HAL_Init+0x40>)
 8001db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dbc:	2003      	movs	r0, #3
 8001dbe:	f000 fd37 	bl	8002830 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dc2:	200f      	movs	r0, #15
 8001dc4:	f000 f808 	bl	8001dd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dc8:	f7ff fed2 	bl	8001b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40023c00 	.word	0x40023c00

08001dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001de0:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <HAL_InitTick+0x54>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <HAL_InitTick+0x58>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	4619      	mov	r1, r3
 8001dea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 fd4f 	bl	800289a <HAL_SYSTICK_Config>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e00e      	b.n	8001e24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b0f      	cmp	r3, #15
 8001e0a:	d80a      	bhi.n	8001e22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	f04f 30ff 	mov.w	r0, #4294967295
 8001e14:	f000 fd17 	bl	8002846 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e18:	4a06      	ldr	r2, [pc, #24]	; (8001e34 <HAL_InitTick+0x5c>)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	e000      	b.n	8001e24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	20000010 	.word	0x20000010
 8001e30:	20000018 	.word	0x20000018
 8001e34:	20000014 	.word	0x20000014

08001e38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_IncTick+0x20>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <HAL_IncTick+0x24>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4413      	add	r3, r2
 8001e48:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <HAL_IncTick+0x24>)
 8001e4a:	6013      	str	r3, [r2, #0]
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	20000018 	.word	0x20000018
 8001e5c:	20000208 	.word	0x20000208

08001e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return uwTick;
 8001e64:	4b03      	ldr	r3, [pc, #12]	; (8001e74 <HAL_GetTick+0x14>)
 8001e66:	681b      	ldr	r3, [r3, #0]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	20000208 	.word	0x20000208

08001e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e80:	f7ff ffee 	bl	8001e60 <HAL_GetTick>
 8001e84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e90:	d005      	beq.n	8001e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e92:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <HAL_Delay+0x44>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	461a      	mov	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e9e:	bf00      	nop
 8001ea0:	f7ff ffde 	bl	8001e60 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d8f7      	bhi.n	8001ea0 <HAL_Delay+0x28>
  {
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	bf00      	nop
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000018 	.word	0x20000018

08001ec0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e033      	b.n	8001f3e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d109      	bne.n	8001ef2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7fe fd80 	bl	80009e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	f003 0310 	and.w	r3, r3, #16
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d118      	bne.n	8001f30 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f06:	f023 0302 	bic.w	r3, r3, #2
 8001f0a:	f043 0202 	orr.w	r2, r3, #2
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 fac0 	bl	8002498 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f023 0303 	bic.w	r3, r3, #3
 8001f26:	f043 0201 	orr.w	r2, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	641a      	str	r2, [r3, #64]	; 0x40
 8001f2e:	e001      	b.n	8001f34 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b084      	sub	sp, #16
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f62:	d113      	bne.n	8001f8c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f72:	d10b      	bne.n	8001f8c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f78:	f043 0220 	orr.w	r2, r3, #32
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e063      	b.n	8002054 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001f8c:	f7ff ff68 	bl	8001e60 <HAL_GetTick>
 8001f90:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f92:	e021      	b.n	8001fd8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f9a:	d01d      	beq.n	8001fd8 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d007      	beq.n	8001fb2 <HAL_ADC_PollForConversion+0x6c>
 8001fa2:	f7ff ff5d 	bl	8001e60 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d212      	bcs.n	8001fd8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d00b      	beq.n	8001fd8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	f043 0204 	orr.w	r2, r3, #4
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e03d      	b.n	8002054 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d1d6      	bne.n	8001f94 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f06f 0212 	mvn.w	r2, #18
 8001fee:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d123      	bne.n	8002052 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800200e:	2b00      	cmp	r3, #0
 8002010:	d11f      	bne.n	8002052 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002018:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800201c:	2b00      	cmp	r3, #0
 800201e:	d006      	beq.n	800202e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800202a:	2b00      	cmp	r3, #0
 800202c:	d111      	bne.n	8002052 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d105      	bne.n	8002052 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	f043 0201 	orr.w	r2, r3, #1
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800206e:	2b01      	cmp	r3, #1
 8002070:	d101      	bne.n	8002076 <HAL_ADC_Start_IT+0x1a>
 8002072:	2302      	movs	r3, #2
 8002074:	e0bd      	b.n	80021f2 <HAL_ADC_Start_IT+0x196>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b01      	cmp	r3, #1
 800208a:	d018      	beq.n	80020be <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0201 	orr.w	r2, r2, #1
 800209a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800209c:	4b58      	ldr	r3, [pc, #352]	; (8002200 <HAL_ADC_Start_IT+0x1a4>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a58      	ldr	r2, [pc, #352]	; (8002204 <HAL_ADC_Start_IT+0x1a8>)
 80020a2:	fba2 2303 	umull	r2, r3, r2, r3
 80020a6:	0c9a      	lsrs	r2, r3, #18
 80020a8:	4613      	mov	r3, r2
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	4413      	add	r3, r2
 80020ae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80020b0:	e002      	b.n	80020b8 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	3b01      	subs	r3, #1
 80020b6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f9      	bne.n	80020b2 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	f040 8085 	bne.w	80021d8 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80020d6:	f023 0301 	bic.w	r3, r3, #1
 80020da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d007      	beq.n	8002100 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800210c:	d106      	bne.n	800211c <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002112:	f023 0206 	bic.w	r2, r3, #6
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	645a      	str	r2, [r3, #68]	; 0x44
 800211a:	e002      	b.n	8002122 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800212a:	4b37      	ldr	r3, [pc, #220]	; (8002208 <HAL_ADC_Start_IT+0x1ac>)
 800212c:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002136:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6812      	ldr	r2, [r2, #0]
 8002142:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002146:	f043 0320 	orr.w	r3, r3, #32
 800214a:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 031f 	and.w	r3, r3, #31
 8002154:	2b00      	cmp	r3, #0
 8002156:	d12a      	bne.n	80021ae <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a2b      	ldr	r2, [pc, #172]	; (800220c <HAL_ADC_Start_IT+0x1b0>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d015      	beq.n	800218e <HAL_ADC_Start_IT+0x132>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a2a      	ldr	r2, [pc, #168]	; (8002210 <HAL_ADC_Start_IT+0x1b4>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d105      	bne.n	8002178 <HAL_ADC_Start_IT+0x11c>
 800216c:	4b26      	ldr	r3, [pc, #152]	; (8002208 <HAL_ADC_Start_IT+0x1ac>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 031f 	and.w	r3, r3, #31
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00a      	beq.n	800218e <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a25      	ldr	r2, [pc, #148]	; (8002214 <HAL_ADC_Start_IT+0x1b8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d136      	bne.n	80021f0 <HAL_ADC_Start_IT+0x194>
 8002182:	4b21      	ldr	r3, [pc, #132]	; (8002208 <HAL_ADC_Start_IT+0x1ac>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f003 0310 	and.w	r3, r3, #16
 800218a:	2b00      	cmp	r3, #0
 800218c:	d130      	bne.n	80021f0 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d129      	bne.n	80021f0 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	e020      	b.n	80021f0 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a16      	ldr	r2, [pc, #88]	; (800220c <HAL_ADC_Start_IT+0x1b0>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d11b      	bne.n	80021f0 <HAL_ADC_Start_IT+0x194>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d114      	bne.n	80021f0 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021d4:	609a      	str	r2, [r3, #8]
 80021d6:	e00b      	b.n	80021f0 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	f043 0210 	orr.w	r2, r3, #16
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e8:	f043 0201 	orr.w	r2, r3, #1
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	20000010 	.word	0x20000010
 8002204:	431bde83 	.word	0x431bde83
 8002208:	40012300 	.word	0x40012300
 800220c:	40012000 	.word	0x40012000
 8002210:	40012100 	.word	0x40012100
 8002214:	40012200 	.word	0x40012200

08002218 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002226:	4618      	mov	r0, r3
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
	...

08002234 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800223e:	2300      	movs	r3, #0
 8002240:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <HAL_ADC_ConfigChannel+0x1c>
 800224c:	2302      	movs	r3, #2
 800224e:	e113      	b.n	8002478 <HAL_ADC_ConfigChannel+0x244>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2b09      	cmp	r3, #9
 800225e:	d925      	bls.n	80022ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68d9      	ldr	r1, [r3, #12]
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	b29b      	uxth	r3, r3
 800226c:	461a      	mov	r2, r3
 800226e:	4613      	mov	r3, r2
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	4413      	add	r3, r2
 8002274:	3b1e      	subs	r3, #30
 8002276:	2207      	movs	r2, #7
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43da      	mvns	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	400a      	ands	r2, r1
 8002284:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68d9      	ldr	r1, [r3, #12]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	b29b      	uxth	r3, r3
 8002296:	4618      	mov	r0, r3
 8002298:	4603      	mov	r3, r0
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	4403      	add	r3, r0
 800229e:	3b1e      	subs	r3, #30
 80022a0:	409a      	lsls	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	e022      	b.n	80022f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6919      	ldr	r1, [r3, #16]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	461a      	mov	r2, r3
 80022ba:	4613      	mov	r3, r2
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	4413      	add	r3, r2
 80022c0:	2207      	movs	r2, #7
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43da      	mvns	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	400a      	ands	r2, r1
 80022ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6919      	ldr	r1, [r3, #16]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	4618      	mov	r0, r3
 80022e2:	4603      	mov	r3, r0
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	4403      	add	r3, r0
 80022e8:	409a      	lsls	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b06      	cmp	r3, #6
 80022f8:	d824      	bhi.n	8002344 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	3b05      	subs	r3, #5
 800230c:	221f      	movs	r2, #31
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43da      	mvns	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	400a      	ands	r2, r1
 800231a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	b29b      	uxth	r3, r3
 8002328:	4618      	mov	r0, r3
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	3b05      	subs	r3, #5
 8002336:	fa00 f203 	lsl.w	r2, r0, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	635a      	str	r2, [r3, #52]	; 0x34
 8002342:	e04c      	b.n	80023de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b0c      	cmp	r3, #12
 800234a:	d824      	bhi.n	8002396 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	3b23      	subs	r3, #35	; 0x23
 800235e:	221f      	movs	r2, #31
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43da      	mvns	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	400a      	ands	r2, r1
 800236c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	b29b      	uxth	r3, r3
 800237a:	4618      	mov	r0, r3
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	3b23      	subs	r3, #35	; 0x23
 8002388:	fa00 f203 	lsl.w	r2, r0, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	631a      	str	r2, [r3, #48]	; 0x30
 8002394:	e023      	b.n	80023de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	3b41      	subs	r3, #65	; 0x41
 80023a8:	221f      	movs	r2, #31
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43da      	mvns	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	400a      	ands	r2, r1
 80023b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	4618      	mov	r0, r3
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	3b41      	subs	r3, #65	; 0x41
 80023d2:	fa00 f203 	lsl.w	r2, r0, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023de:	4b29      	ldr	r3, [pc, #164]	; (8002484 <HAL_ADC_ConfigChannel+0x250>)
 80023e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a28      	ldr	r2, [pc, #160]	; (8002488 <HAL_ADC_ConfigChannel+0x254>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d10f      	bne.n	800240c <HAL_ADC_ConfigChannel+0x1d8>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b12      	cmp	r3, #18
 80023f2:	d10b      	bne.n	800240c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a1d      	ldr	r2, [pc, #116]	; (8002488 <HAL_ADC_ConfigChannel+0x254>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d12b      	bne.n	800246e <HAL_ADC_ConfigChannel+0x23a>
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a1c      	ldr	r2, [pc, #112]	; (800248c <HAL_ADC_ConfigChannel+0x258>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d003      	beq.n	8002428 <HAL_ADC_ConfigChannel+0x1f4>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b11      	cmp	r3, #17
 8002426:	d122      	bne.n	800246e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a11      	ldr	r2, [pc, #68]	; (800248c <HAL_ADC_ConfigChannel+0x258>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d111      	bne.n	800246e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800244a:	4b11      	ldr	r3, [pc, #68]	; (8002490 <HAL_ADC_ConfigChannel+0x25c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a11      	ldr	r2, [pc, #68]	; (8002494 <HAL_ADC_ConfigChannel+0x260>)
 8002450:	fba2 2303 	umull	r2, r3, r2, r3
 8002454:	0c9a      	lsrs	r2, r3, #18
 8002456:	4613      	mov	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002460:	e002      	b.n	8002468 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	3b01      	subs	r3, #1
 8002466:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f9      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	40012300 	.word	0x40012300
 8002488:	40012000 	.word	0x40012000
 800248c:	10000012 	.word	0x10000012
 8002490:	20000010 	.word	0x20000010
 8002494:	431bde83 	.word	0x431bde83

08002498 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024a0:	4b79      	ldr	r3, [pc, #484]	; (8002688 <ADC_Init+0x1f0>)
 80024a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	431a      	orrs	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6859      	ldr	r1, [r3, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	021a      	lsls	r2, r3, #8
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80024f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6859      	ldr	r1, [r3, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	430a      	orrs	r2, r1
 8002502:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002512:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6899      	ldr	r1, [r3, #8]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252a:	4a58      	ldr	r2, [pc, #352]	; (800268c <ADC_Init+0x1f4>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d022      	beq.n	8002576 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800253e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6899      	ldr	r1, [r3, #8]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002560:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6899      	ldr	r1, [r3, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	e00f      	b.n	8002596 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002584:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002594:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0202 	bic.w	r2, r2, #2
 80025a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6899      	ldr	r1, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	7e1b      	ldrb	r3, [r3, #24]
 80025b0:	005a      	lsls	r2, r3, #1
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d01b      	beq.n	80025fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80025e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6859      	ldr	r1, [r3, #4]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	3b01      	subs	r3, #1
 80025f0:	035a      	lsls	r2, r3, #13
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	e007      	b.n	800260c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800260a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800261a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	3b01      	subs	r3, #1
 8002628:	051a      	lsls	r2, r3, #20
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002640:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6899      	ldr	r1, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800264e:	025a      	lsls	r2, r3, #9
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002666:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6899      	ldr	r1, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	029a      	lsls	r2, r3, #10
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	609a      	str	r2, [r3, #8]
}
 800267c:	bf00      	nop
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	40012300 	.word	0x40012300
 800268c:	0f000001 	.word	0x0f000001

08002690 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026a0:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <__NVIC_SetPriorityGrouping+0x44>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026ac:	4013      	ands	r3, r2
 80026ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026c2:	4a04      	ldr	r2, [pc, #16]	; (80026d4 <__NVIC_SetPriorityGrouping+0x44>)
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	60d3      	str	r3, [r2, #12]
}
 80026c8:	bf00      	nop
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026dc:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <__NVIC_GetPriorityGrouping+0x18>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	0a1b      	lsrs	r3, r3, #8
 80026e2:	f003 0307 	and.w	r3, r3, #7
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	2b00      	cmp	r3, #0
 8002704:	db0b      	blt.n	800271e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	f003 021f 	and.w	r2, r3, #31
 800270c:	4907      	ldr	r1, [pc, #28]	; (800272c <__NVIC_EnableIRQ+0x38>)
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	2001      	movs	r0, #1
 8002716:	fa00 f202 	lsl.w	r2, r0, r2
 800271a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	e000e100 	.word	0xe000e100

08002730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	6039      	str	r1, [r7, #0]
 800273a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800273c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002740:	2b00      	cmp	r3, #0
 8002742:	db0a      	blt.n	800275a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	b2da      	uxtb	r2, r3
 8002748:	490c      	ldr	r1, [pc, #48]	; (800277c <__NVIC_SetPriority+0x4c>)
 800274a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274e:	0112      	lsls	r2, r2, #4
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	440b      	add	r3, r1
 8002754:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002758:	e00a      	b.n	8002770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	b2da      	uxtb	r2, r3
 800275e:	4908      	ldr	r1, [pc, #32]	; (8002780 <__NVIC_SetPriority+0x50>)
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	3b04      	subs	r3, #4
 8002768:	0112      	lsls	r2, r2, #4
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	440b      	add	r3, r1
 800276e:	761a      	strb	r2, [r3, #24]
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	e000e100 	.word	0xe000e100
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002784:	b480      	push	{r7}
 8002786:	b089      	sub	sp, #36	; 0x24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f1c3 0307 	rsb	r3, r3, #7
 800279e:	2b04      	cmp	r3, #4
 80027a0:	bf28      	it	cs
 80027a2:	2304      	movcs	r3, #4
 80027a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3304      	adds	r3, #4
 80027aa:	2b06      	cmp	r3, #6
 80027ac:	d902      	bls.n	80027b4 <NVIC_EncodePriority+0x30>
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	3b03      	subs	r3, #3
 80027b2:	e000      	b.n	80027b6 <NVIC_EncodePriority+0x32>
 80027b4:	2300      	movs	r3, #0
 80027b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b8:	f04f 32ff 	mov.w	r2, #4294967295
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43da      	mvns	r2, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	401a      	ands	r2, r3
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027cc:	f04f 31ff 	mov.w	r1, #4294967295
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	fa01 f303 	lsl.w	r3, r1, r3
 80027d6:	43d9      	mvns	r1, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027dc:	4313      	orrs	r3, r2
         );
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3724      	adds	r7, #36	; 0x24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
	...

080027ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027fc:	d301      	bcc.n	8002802 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027fe:	2301      	movs	r3, #1
 8002800:	e00f      	b.n	8002822 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002802:	4a0a      	ldr	r2, [pc, #40]	; (800282c <SysTick_Config+0x40>)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3b01      	subs	r3, #1
 8002808:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800280a:	210f      	movs	r1, #15
 800280c:	f04f 30ff 	mov.w	r0, #4294967295
 8002810:	f7ff ff8e 	bl	8002730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002814:	4b05      	ldr	r3, [pc, #20]	; (800282c <SysTick_Config+0x40>)
 8002816:	2200      	movs	r2, #0
 8002818:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800281a:	4b04      	ldr	r3, [pc, #16]	; (800282c <SysTick_Config+0x40>)
 800281c:	2207      	movs	r2, #7
 800281e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	e000e010 	.word	0xe000e010

08002830 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff ff29 	bl	8002690 <__NVIC_SetPriorityGrouping>
}
 800283e:	bf00      	nop
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002846:	b580      	push	{r7, lr}
 8002848:	b086      	sub	sp, #24
 800284a:	af00      	add	r7, sp, #0
 800284c:	4603      	mov	r3, r0
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	607a      	str	r2, [r7, #4]
 8002852:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002858:	f7ff ff3e 	bl	80026d8 <__NVIC_GetPriorityGrouping>
 800285c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	68b9      	ldr	r1, [r7, #8]
 8002862:	6978      	ldr	r0, [r7, #20]
 8002864:	f7ff ff8e 	bl	8002784 <NVIC_EncodePriority>
 8002868:	4602      	mov	r2, r0
 800286a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800286e:	4611      	mov	r1, r2
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff ff5d 	bl	8002730 <__NVIC_SetPriority>
}
 8002876:	bf00      	nop
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b082      	sub	sp, #8
 8002882:	af00      	add	r7, sp, #0
 8002884:	4603      	mov	r3, r0
 8002886:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff ff31 	bl	80026f4 <__NVIC_EnableIRQ>
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b082      	sub	sp, #8
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff ffa2 	bl	80027ec <SysTick_Config>
 80028a8:	4603      	mov	r3, r0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b089      	sub	sp, #36	; 0x24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028be:	2300      	movs	r3, #0
 80028c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ca:	2300      	movs	r3, #0
 80028cc:	61fb      	str	r3, [r7, #28]
 80028ce:	e177      	b.n	8002bc0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028d0:	2201      	movs	r2, #1
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	4013      	ands	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	f040 8166 	bne.w	8002bba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d005      	beq.n	8002906 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002902:	2b02      	cmp	r3, #2
 8002904:	d130      	bne.n	8002968 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	2203      	movs	r2, #3
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43db      	mvns	r3, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4013      	ands	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4313      	orrs	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800293c:	2201      	movs	r2, #1
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	091b      	lsrs	r3, r3, #4
 8002952:	f003 0201 	and.w	r2, r3, #1
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 0303 	and.w	r3, r3, #3
 8002970:	2b03      	cmp	r3, #3
 8002972:	d017      	beq.n	80029a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	2203      	movs	r2, #3
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4013      	ands	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f003 0303 	and.w	r3, r3, #3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d123      	bne.n	80029f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	08da      	lsrs	r2, r3, #3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3208      	adds	r2, #8
 80029b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	220f      	movs	r2, #15
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	691a      	ldr	r2, [r3, #16]
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	08da      	lsrs	r2, r3, #3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3208      	adds	r2, #8
 80029f2:	69b9      	ldr	r1, [r7, #24]
 80029f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	2203      	movs	r2, #3
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 0203 	and.w	r2, r3, #3
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 80c0 	beq.w	8002bba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	4b66      	ldr	r3, [pc, #408]	; (8002bd8 <HAL_GPIO_Init+0x324>)
 8002a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a42:	4a65      	ldr	r2, [pc, #404]	; (8002bd8 <HAL_GPIO_Init+0x324>)
 8002a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a48:	6453      	str	r3, [r2, #68]	; 0x44
 8002a4a:	4b63      	ldr	r3, [pc, #396]	; (8002bd8 <HAL_GPIO_Init+0x324>)
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a56:	4a61      	ldr	r2, [pc, #388]	; (8002bdc <HAL_GPIO_Init+0x328>)
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	089b      	lsrs	r3, r3, #2
 8002a5c:	3302      	adds	r3, #2
 8002a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	220f      	movs	r2, #15
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43db      	mvns	r3, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4013      	ands	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a58      	ldr	r2, [pc, #352]	; (8002be0 <HAL_GPIO_Init+0x32c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d037      	beq.n	8002af2 <HAL_GPIO_Init+0x23e>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a57      	ldr	r2, [pc, #348]	; (8002be4 <HAL_GPIO_Init+0x330>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d031      	beq.n	8002aee <HAL_GPIO_Init+0x23a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a56      	ldr	r2, [pc, #344]	; (8002be8 <HAL_GPIO_Init+0x334>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d02b      	beq.n	8002aea <HAL_GPIO_Init+0x236>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a55      	ldr	r2, [pc, #340]	; (8002bec <HAL_GPIO_Init+0x338>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d025      	beq.n	8002ae6 <HAL_GPIO_Init+0x232>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a54      	ldr	r2, [pc, #336]	; (8002bf0 <HAL_GPIO_Init+0x33c>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d01f      	beq.n	8002ae2 <HAL_GPIO_Init+0x22e>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a53      	ldr	r2, [pc, #332]	; (8002bf4 <HAL_GPIO_Init+0x340>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d019      	beq.n	8002ade <HAL_GPIO_Init+0x22a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a52      	ldr	r2, [pc, #328]	; (8002bf8 <HAL_GPIO_Init+0x344>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d013      	beq.n	8002ada <HAL_GPIO_Init+0x226>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a51      	ldr	r2, [pc, #324]	; (8002bfc <HAL_GPIO_Init+0x348>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d00d      	beq.n	8002ad6 <HAL_GPIO_Init+0x222>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a50      	ldr	r2, [pc, #320]	; (8002c00 <HAL_GPIO_Init+0x34c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d007      	beq.n	8002ad2 <HAL_GPIO_Init+0x21e>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a4f      	ldr	r2, [pc, #316]	; (8002c04 <HAL_GPIO_Init+0x350>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d101      	bne.n	8002ace <HAL_GPIO_Init+0x21a>
 8002aca:	2309      	movs	r3, #9
 8002acc:	e012      	b.n	8002af4 <HAL_GPIO_Init+0x240>
 8002ace:	230a      	movs	r3, #10
 8002ad0:	e010      	b.n	8002af4 <HAL_GPIO_Init+0x240>
 8002ad2:	2308      	movs	r3, #8
 8002ad4:	e00e      	b.n	8002af4 <HAL_GPIO_Init+0x240>
 8002ad6:	2307      	movs	r3, #7
 8002ad8:	e00c      	b.n	8002af4 <HAL_GPIO_Init+0x240>
 8002ada:	2306      	movs	r3, #6
 8002adc:	e00a      	b.n	8002af4 <HAL_GPIO_Init+0x240>
 8002ade:	2305      	movs	r3, #5
 8002ae0:	e008      	b.n	8002af4 <HAL_GPIO_Init+0x240>
 8002ae2:	2304      	movs	r3, #4
 8002ae4:	e006      	b.n	8002af4 <HAL_GPIO_Init+0x240>
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e004      	b.n	8002af4 <HAL_GPIO_Init+0x240>
 8002aea:	2302      	movs	r3, #2
 8002aec:	e002      	b.n	8002af4 <HAL_GPIO_Init+0x240>
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <HAL_GPIO_Init+0x240>
 8002af2:	2300      	movs	r3, #0
 8002af4:	69fa      	ldr	r2, [r7, #28]
 8002af6:	f002 0203 	and.w	r2, r2, #3
 8002afa:	0092      	lsls	r2, r2, #2
 8002afc:	4093      	lsls	r3, r2
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b04:	4935      	ldr	r1, [pc, #212]	; (8002bdc <HAL_GPIO_Init+0x328>)
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	089b      	lsrs	r3, r3, #2
 8002b0a:	3302      	adds	r3, #2
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b12:	4b3d      	ldr	r3, [pc, #244]	; (8002c08 <HAL_GPIO_Init+0x354>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b36:	4a34      	ldr	r2, [pc, #208]	; (8002c08 <HAL_GPIO_Init+0x354>)
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b3c:	4b32      	ldr	r3, [pc, #200]	; (8002c08 <HAL_GPIO_Init+0x354>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	43db      	mvns	r3, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d003      	beq.n	8002b60 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b60:	4a29      	ldr	r2, [pc, #164]	; (8002c08 <HAL_GPIO_Init+0x354>)
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b66:	4b28      	ldr	r3, [pc, #160]	; (8002c08 <HAL_GPIO_Init+0x354>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b8a:	4a1f      	ldr	r2, [pc, #124]	; (8002c08 <HAL_GPIO_Init+0x354>)
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b90:	4b1d      	ldr	r3, [pc, #116]	; (8002c08 <HAL_GPIO_Init+0x354>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bb4:	4a14      	ldr	r2, [pc, #80]	; (8002c08 <HAL_GPIO_Init+0x354>)
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	61fb      	str	r3, [r7, #28]
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	2b0f      	cmp	r3, #15
 8002bc4:	f67f ae84 	bls.w	80028d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bc8:	bf00      	nop
 8002bca:	bf00      	nop
 8002bcc:	3724      	adds	r7, #36	; 0x24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	40013800 	.word	0x40013800
 8002be0:	40020000 	.word	0x40020000
 8002be4:	40020400 	.word	0x40020400
 8002be8:	40020800 	.word	0x40020800
 8002bec:	40020c00 	.word	0x40020c00
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	40021400 	.word	0x40021400
 8002bf8:	40021800 	.word	0x40021800
 8002bfc:	40021c00 	.word	0x40021c00
 8002c00:	40022000 	.word	0x40022000
 8002c04:	40022400 	.word	0x40022400
 8002c08:	40013c00 	.word	0x40013c00

08002c0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691a      	ldr	r2, [r3, #16]
 8002c1c:	887b      	ldrh	r3, [r7, #2]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d002      	beq.n	8002c2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c24:	2301      	movs	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
 8002c28:	e001      	b.n	8002c2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	807b      	strh	r3, [r7, #2]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c4c:	787b      	ldrb	r3, [r7, #1]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c52:	887a      	ldrh	r2, [r7, #2]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c58:	e003      	b.n	8002c62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c5a:	887b      	ldrh	r3, [r7, #2]
 8002c5c:	041a      	lsls	r2, r3, #16
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	619a      	str	r2, [r3, #24]
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
	...

08002c70 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	603b      	str	r3, [r7, #0]
 8002c7e:	4b20      	ldr	r3, [pc, #128]	; (8002d00 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	4a1f      	ldr	r2, [pc, #124]	; (8002d00 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c88:	6413      	str	r3, [r2, #64]	; 0x40
 8002c8a:	4b1d      	ldr	r3, [pc, #116]	; (8002d00 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c92:	603b      	str	r3, [r7, #0]
 8002c94:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c96:	4b1b      	ldr	r3, [pc, #108]	; (8002d04 <HAL_PWREx_EnableOverDrive+0x94>)
 8002c98:	2201      	movs	r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c9c:	f7ff f8e0 	bl	8001e60 <HAL_GetTick>
 8002ca0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ca2:	e009      	b.n	8002cb8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ca4:	f7ff f8dc 	bl	8001e60 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cb2:	d901      	bls.n	8002cb8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e01f      	b.n	8002cf8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cb8:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <HAL_PWREx_EnableOverDrive+0x98>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc4:	d1ee      	bne.n	8002ca4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002cc6:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ccc:	f7ff f8c8 	bl	8001e60 <HAL_GetTick>
 8002cd0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002cd2:	e009      	b.n	8002ce8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cd4:	f7ff f8c4 	bl	8001e60 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ce2:	d901      	bls.n	8002ce8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e007      	b.n	8002cf8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ce8:	4b07      	ldr	r3, [pc, #28]	; (8002d08 <HAL_PWREx_EnableOverDrive+0x98>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cf4:	d1ee      	bne.n	8002cd4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40023800 	.word	0x40023800
 8002d04:	420e0040 	.word	0x420e0040
 8002d08:	40007000 	.word	0x40007000
 8002d0c:	420e0044 	.word	0x420e0044

08002d10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e267      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d075      	beq.n	8002e1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d2e:	4b88      	ldr	r3, [pc, #544]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d00c      	beq.n	8002d54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d3a:	4b85      	ldr	r3, [pc, #532]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d112      	bne.n	8002d6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d46:	4b82      	ldr	r3, [pc, #520]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d52:	d10b      	bne.n	8002d6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d54:	4b7e      	ldr	r3, [pc, #504]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d05b      	beq.n	8002e18 <HAL_RCC_OscConfig+0x108>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d157      	bne.n	8002e18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e242      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d74:	d106      	bne.n	8002d84 <HAL_RCC_OscConfig+0x74>
 8002d76:	4b76      	ldr	r3, [pc, #472]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a75      	ldr	r2, [pc, #468]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	e01d      	b.n	8002dc0 <HAL_RCC_OscConfig+0xb0>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d8c:	d10c      	bne.n	8002da8 <HAL_RCC_OscConfig+0x98>
 8002d8e:	4b70      	ldr	r3, [pc, #448]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a6f      	ldr	r2, [pc, #444]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	4b6d      	ldr	r3, [pc, #436]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a6c      	ldr	r2, [pc, #432]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	e00b      	b.n	8002dc0 <HAL_RCC_OscConfig+0xb0>
 8002da8:	4b69      	ldr	r3, [pc, #420]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a68      	ldr	r2, [pc, #416]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	4b66      	ldr	r3, [pc, #408]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a65      	ldr	r2, [pc, #404]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d013      	beq.n	8002df0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc8:	f7ff f84a 	bl	8001e60 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dd0:	f7ff f846 	bl	8001e60 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b64      	cmp	r3, #100	; 0x64
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e207      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de2:	4b5b      	ldr	r3, [pc, #364]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0xc0>
 8002dee:	e014      	b.n	8002e1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df0:	f7ff f836 	bl	8001e60 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002df8:	f7ff f832 	bl	8001e60 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b64      	cmp	r3, #100	; 0x64
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e1f3      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e0a:	4b51      	ldr	r3, [pc, #324]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0xe8>
 8002e16:	e000      	b.n	8002e1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d063      	beq.n	8002eee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e26:	4b4a      	ldr	r3, [pc, #296]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 030c 	and.w	r3, r3, #12
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00b      	beq.n	8002e4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e32:	4b47      	ldr	r3, [pc, #284]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	d11c      	bne.n	8002e78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e3e:	4b44      	ldr	r3, [pc, #272]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d116      	bne.n	8002e78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e4a:	4b41      	ldr	r3, [pc, #260]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d005      	beq.n	8002e62 <HAL_RCC_OscConfig+0x152>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d001      	beq.n	8002e62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e1c7      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e62:	4b3b      	ldr	r3, [pc, #236]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	4937      	ldr	r1, [pc, #220]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e76:	e03a      	b.n	8002eee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d020      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e80:	4b34      	ldr	r3, [pc, #208]	; (8002f54 <HAL_RCC_OscConfig+0x244>)
 8002e82:	2201      	movs	r2, #1
 8002e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e86:	f7fe ffeb 	bl	8001e60 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e8e:	f7fe ffe7 	bl	8001e60 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e1a8      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea0:	4b2b      	ldr	r3, [pc, #172]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0f0      	beq.n	8002e8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eac:	4b28      	ldr	r3, [pc, #160]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	4925      	ldr	r1, [pc, #148]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	600b      	str	r3, [r1, #0]
 8002ec0:	e015      	b.n	8002eee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ec2:	4b24      	ldr	r3, [pc, #144]	; (8002f54 <HAL_RCC_OscConfig+0x244>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec8:	f7fe ffca 	bl	8001e60 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ed0:	f7fe ffc6 	bl	8001e60 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e187      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ee2:	4b1b      	ldr	r3, [pc, #108]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f0      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d036      	beq.n	8002f68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d016      	beq.n	8002f30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f02:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <HAL_RCC_OscConfig+0x248>)
 8002f04:	2201      	movs	r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f08:	f7fe ffaa 	bl	8001e60 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f10:	f7fe ffa6 	bl	8001e60 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e167      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f22:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0f0      	beq.n	8002f10 <HAL_RCC_OscConfig+0x200>
 8002f2e:	e01b      	b.n	8002f68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f30:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <HAL_RCC_OscConfig+0x248>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f36:	f7fe ff93 	bl	8001e60 <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f3c:	e00e      	b.n	8002f5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f3e:	f7fe ff8f 	bl	8001e60 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d907      	bls.n	8002f5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e150      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
 8002f50:	40023800 	.word	0x40023800
 8002f54:	42470000 	.word	0x42470000
 8002f58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f5c:	4b88      	ldr	r3, [pc, #544]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8002f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1ea      	bne.n	8002f3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 8097 	beq.w	80030a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f76:	2300      	movs	r3, #0
 8002f78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f7a:	4b81      	ldr	r3, [pc, #516]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10f      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	60bb      	str	r3, [r7, #8]
 8002f8a:	4b7d      	ldr	r3, [pc, #500]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	4a7c      	ldr	r2, [pc, #496]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8002f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f94:	6413      	str	r3, [r2, #64]	; 0x40
 8002f96:	4b7a      	ldr	r3, [pc, #488]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9e:	60bb      	str	r3, [r7, #8]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa6:	4b77      	ldr	r3, [pc, #476]	; (8003184 <HAL_RCC_OscConfig+0x474>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d118      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fb2:	4b74      	ldr	r3, [pc, #464]	; (8003184 <HAL_RCC_OscConfig+0x474>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a73      	ldr	r2, [pc, #460]	; (8003184 <HAL_RCC_OscConfig+0x474>)
 8002fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fbe:	f7fe ff4f 	bl	8001e60 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fc6:	f7fe ff4b 	bl	8001e60 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e10c      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd8:	4b6a      	ldr	r3, [pc, #424]	; (8003184 <HAL_RCC_OscConfig+0x474>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0f0      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d106      	bne.n	8002ffa <HAL_RCC_OscConfig+0x2ea>
 8002fec:	4b64      	ldr	r3, [pc, #400]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8002fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff0:	4a63      	ldr	r2, [pc, #396]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8002ff2:	f043 0301 	orr.w	r3, r3, #1
 8002ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff8:	e01c      	b.n	8003034 <HAL_RCC_OscConfig+0x324>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	2b05      	cmp	r3, #5
 8003000:	d10c      	bne.n	800301c <HAL_RCC_OscConfig+0x30c>
 8003002:	4b5f      	ldr	r3, [pc, #380]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8003004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003006:	4a5e      	ldr	r2, [pc, #376]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8003008:	f043 0304 	orr.w	r3, r3, #4
 800300c:	6713      	str	r3, [r2, #112]	; 0x70
 800300e:	4b5c      	ldr	r3, [pc, #368]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8003010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003012:	4a5b      	ldr	r2, [pc, #364]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	6713      	str	r3, [r2, #112]	; 0x70
 800301a:	e00b      	b.n	8003034 <HAL_RCC_OscConfig+0x324>
 800301c:	4b58      	ldr	r3, [pc, #352]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 800301e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003020:	4a57      	ldr	r2, [pc, #348]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8003022:	f023 0301 	bic.w	r3, r3, #1
 8003026:	6713      	str	r3, [r2, #112]	; 0x70
 8003028:	4b55      	ldr	r3, [pc, #340]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 800302a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302c:	4a54      	ldr	r2, [pc, #336]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 800302e:	f023 0304 	bic.w	r3, r3, #4
 8003032:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d015      	beq.n	8003068 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303c:	f7fe ff10 	bl	8001e60 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003042:	e00a      	b.n	800305a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003044:	f7fe ff0c 	bl	8001e60 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003052:	4293      	cmp	r3, r2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e0cb      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305a:	4b49      	ldr	r3, [pc, #292]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 800305c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0ee      	beq.n	8003044 <HAL_RCC_OscConfig+0x334>
 8003066:	e014      	b.n	8003092 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003068:	f7fe fefa 	bl	8001e60 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800306e:	e00a      	b.n	8003086 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003070:	f7fe fef6 	bl	8001e60 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	f241 3288 	movw	r2, #5000	; 0x1388
 800307e:	4293      	cmp	r3, r2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e0b5      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003086:	4b3e      	ldr	r3, [pc, #248]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8003088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1ee      	bne.n	8003070 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003092:	7dfb      	ldrb	r3, [r7, #23]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d105      	bne.n	80030a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003098:	4b39      	ldr	r3, [pc, #228]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	4a38      	ldr	r2, [pc, #224]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 800309e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 80a1 	beq.w	80031f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030ae:	4b34      	ldr	r3, [pc, #208]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 030c 	and.w	r3, r3, #12
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d05c      	beq.n	8003174 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d141      	bne.n	8003146 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c2:	4b31      	ldr	r3, [pc, #196]	; (8003188 <HAL_RCC_OscConfig+0x478>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c8:	f7fe feca 	bl	8001e60 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d0:	f7fe fec6 	bl	8001e60 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e087      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e2:	4b27      	ldr	r3, [pc, #156]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69da      	ldr	r2, [r3, #28]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	019b      	lsls	r3, r3, #6
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003104:	085b      	lsrs	r3, r3, #1
 8003106:	3b01      	subs	r3, #1
 8003108:	041b      	lsls	r3, r3, #16
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003110:	061b      	lsls	r3, r3, #24
 8003112:	491b      	ldr	r1, [pc, #108]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8003114:	4313      	orrs	r3, r2
 8003116:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003118:	4b1b      	ldr	r3, [pc, #108]	; (8003188 <HAL_RCC_OscConfig+0x478>)
 800311a:	2201      	movs	r2, #1
 800311c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311e:	f7fe fe9f 	bl	8001e60 <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003126:	f7fe fe9b 	bl	8001e60 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e05c      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003138:	4b11      	ldr	r3, [pc, #68]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0f0      	beq.n	8003126 <HAL_RCC_OscConfig+0x416>
 8003144:	e054      	b.n	80031f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003146:	4b10      	ldr	r3, [pc, #64]	; (8003188 <HAL_RCC_OscConfig+0x478>)
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314c:	f7fe fe88 	bl	8001e60 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003154:	f7fe fe84 	bl	8001e60 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e045      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003166:	4b06      	ldr	r3, [pc, #24]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x444>
 8003172:	e03d      	b.n	80031f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d107      	bne.n	800318c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e038      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
 8003180:	40023800 	.word	0x40023800
 8003184:	40007000 	.word	0x40007000
 8003188:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800318c:	4b1b      	ldr	r3, [pc, #108]	; (80031fc <HAL_RCC_OscConfig+0x4ec>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d028      	beq.n	80031ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d121      	bne.n	80031ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d11a      	bne.n	80031ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031bc:	4013      	ands	r3, r2
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d111      	bne.n	80031ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d2:	085b      	lsrs	r3, r3, #1
 80031d4:	3b01      	subs	r3, #1
 80031d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031d8:	429a      	cmp	r2, r3
 80031da:	d107      	bne.n	80031ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d001      	beq.n	80031f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e000      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40023800 	.word	0x40023800

08003200 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e0cc      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003214:	4b68      	ldr	r3, [pc, #416]	; (80033b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 030f 	and.w	r3, r3, #15
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d90c      	bls.n	800323c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003222:	4b65      	ldr	r3, [pc, #404]	; (80033b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800322a:	4b63      	ldr	r3, [pc, #396]	; (80033b8 <HAL_RCC_ClockConfig+0x1b8>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	429a      	cmp	r2, r3
 8003236:	d001      	beq.n	800323c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e0b8      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d020      	beq.n	800328a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b00      	cmp	r3, #0
 8003252:	d005      	beq.n	8003260 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003254:	4b59      	ldr	r3, [pc, #356]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	4a58      	ldr	r2, [pc, #352]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800325e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0308 	and.w	r3, r3, #8
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800326c:	4b53      	ldr	r3, [pc, #332]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	4a52      	ldr	r2, [pc, #328]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003276:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003278:	4b50      	ldr	r3, [pc, #320]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	494d      	ldr	r1, [pc, #308]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	4313      	orrs	r3, r2
 8003288:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d044      	beq.n	8003320 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d107      	bne.n	80032ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329e:	4b47      	ldr	r3, [pc, #284]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d119      	bne.n	80032de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e07f      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d003      	beq.n	80032be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ba:	2b03      	cmp	r3, #3
 80032bc:	d107      	bne.n	80032ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032be:	4b3f      	ldr	r3, [pc, #252]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d109      	bne.n	80032de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e06f      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ce:	4b3b      	ldr	r3, [pc, #236]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e067      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032de:	4b37      	ldr	r3, [pc, #220]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f023 0203 	bic.w	r2, r3, #3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	4934      	ldr	r1, [pc, #208]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032f0:	f7fe fdb6 	bl	8001e60 <HAL_GetTick>
 80032f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032f6:	e00a      	b.n	800330e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032f8:	f7fe fdb2 	bl	8001e60 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	f241 3288 	movw	r2, #5000	; 0x1388
 8003306:	4293      	cmp	r3, r2
 8003308:	d901      	bls.n	800330e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e04f      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800330e:	4b2b      	ldr	r3, [pc, #172]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 020c 	and.w	r2, r3, #12
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	429a      	cmp	r2, r3
 800331e:	d1eb      	bne.n	80032f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003320:	4b25      	ldr	r3, [pc, #148]	; (80033b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 030f 	and.w	r3, r3, #15
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d20c      	bcs.n	8003348 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800332e:	4b22      	ldr	r3, [pc, #136]	; (80033b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003336:	4b20      	ldr	r3, [pc, #128]	; (80033b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d001      	beq.n	8003348 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e032      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	2b00      	cmp	r3, #0
 8003352:	d008      	beq.n	8003366 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003354:	4b19      	ldr	r3, [pc, #100]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	4916      	ldr	r1, [pc, #88]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	4313      	orrs	r3, r2
 8003364:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d009      	beq.n	8003386 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003372:	4b12      	ldr	r3, [pc, #72]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	490e      	ldr	r1, [pc, #56]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	4313      	orrs	r3, r2
 8003384:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003386:	f000 f821 	bl	80033cc <HAL_RCC_GetSysClockFreq>
 800338a:	4602      	mov	r2, r0
 800338c:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	091b      	lsrs	r3, r3, #4
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	490a      	ldr	r1, [pc, #40]	; (80033c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003398:	5ccb      	ldrb	r3, [r1, r3]
 800339a:	fa22 f303 	lsr.w	r3, r2, r3
 800339e:	4a09      	ldr	r2, [pc, #36]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 80033a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033a2:	4b09      	ldr	r3, [pc, #36]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fe fd16 	bl	8001dd8 <HAL_InitTick>

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	40023c00 	.word	0x40023c00
 80033bc:	40023800 	.word	0x40023800
 80033c0:	08004400 	.word	0x08004400
 80033c4:	20000010 	.word	0x20000010
 80033c8:	20000014 	.word	0x20000014

080033cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033d0:	b090      	sub	sp, #64	; 0x40
 80033d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	637b      	str	r3, [r7, #52]	; 0x34
 80033d8:	2300      	movs	r3, #0
 80033da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033dc:	2300      	movs	r3, #0
 80033de:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033e4:	4b59      	ldr	r3, [pc, #356]	; (800354c <HAL_RCC_GetSysClockFreq+0x180>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f003 030c 	and.w	r3, r3, #12
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d00d      	beq.n	800340c <HAL_RCC_GetSysClockFreq+0x40>
 80033f0:	2b08      	cmp	r3, #8
 80033f2:	f200 80a1 	bhi.w	8003538 <HAL_RCC_GetSysClockFreq+0x16c>
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d002      	beq.n	8003400 <HAL_RCC_GetSysClockFreq+0x34>
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d003      	beq.n	8003406 <HAL_RCC_GetSysClockFreq+0x3a>
 80033fe:	e09b      	b.n	8003538 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003400:	4b53      	ldr	r3, [pc, #332]	; (8003550 <HAL_RCC_GetSysClockFreq+0x184>)
 8003402:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003404:	e09b      	b.n	800353e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003406:	4b53      	ldr	r3, [pc, #332]	; (8003554 <HAL_RCC_GetSysClockFreq+0x188>)
 8003408:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800340a:	e098      	b.n	800353e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800340c:	4b4f      	ldr	r3, [pc, #316]	; (800354c <HAL_RCC_GetSysClockFreq+0x180>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003414:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003416:	4b4d      	ldr	r3, [pc, #308]	; (800354c <HAL_RCC_GetSysClockFreq+0x180>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d028      	beq.n	8003474 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003422:	4b4a      	ldr	r3, [pc, #296]	; (800354c <HAL_RCC_GetSysClockFreq+0x180>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	099b      	lsrs	r3, r3, #6
 8003428:	2200      	movs	r2, #0
 800342a:	623b      	str	r3, [r7, #32]
 800342c:	627a      	str	r2, [r7, #36]	; 0x24
 800342e:	6a3b      	ldr	r3, [r7, #32]
 8003430:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003434:	2100      	movs	r1, #0
 8003436:	4b47      	ldr	r3, [pc, #284]	; (8003554 <HAL_RCC_GetSysClockFreq+0x188>)
 8003438:	fb03 f201 	mul.w	r2, r3, r1
 800343c:	2300      	movs	r3, #0
 800343e:	fb00 f303 	mul.w	r3, r0, r3
 8003442:	4413      	add	r3, r2
 8003444:	4a43      	ldr	r2, [pc, #268]	; (8003554 <HAL_RCC_GetSysClockFreq+0x188>)
 8003446:	fba0 1202 	umull	r1, r2, r0, r2
 800344a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800344c:	460a      	mov	r2, r1
 800344e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003452:	4413      	add	r3, r2
 8003454:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003458:	2200      	movs	r2, #0
 800345a:	61bb      	str	r3, [r7, #24]
 800345c:	61fa      	str	r2, [r7, #28]
 800345e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003462:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003466:	f7fc fec1 	bl	80001ec <__aeabi_uldivmod>
 800346a:	4602      	mov	r2, r0
 800346c:	460b      	mov	r3, r1
 800346e:	4613      	mov	r3, r2
 8003470:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003472:	e053      	b.n	800351c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003474:	4b35      	ldr	r3, [pc, #212]	; (800354c <HAL_RCC_GetSysClockFreq+0x180>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	099b      	lsrs	r3, r3, #6
 800347a:	2200      	movs	r2, #0
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	617a      	str	r2, [r7, #20]
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003486:	f04f 0b00 	mov.w	fp, #0
 800348a:	4652      	mov	r2, sl
 800348c:	465b      	mov	r3, fp
 800348e:	f04f 0000 	mov.w	r0, #0
 8003492:	f04f 0100 	mov.w	r1, #0
 8003496:	0159      	lsls	r1, r3, #5
 8003498:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800349c:	0150      	lsls	r0, r2, #5
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	ebb2 080a 	subs.w	r8, r2, sl
 80034a6:	eb63 090b 	sbc.w	r9, r3, fp
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80034b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80034ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80034be:	ebb2 0408 	subs.w	r4, r2, r8
 80034c2:	eb63 0509 	sbc.w	r5, r3, r9
 80034c6:	f04f 0200 	mov.w	r2, #0
 80034ca:	f04f 0300 	mov.w	r3, #0
 80034ce:	00eb      	lsls	r3, r5, #3
 80034d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034d4:	00e2      	lsls	r2, r4, #3
 80034d6:	4614      	mov	r4, r2
 80034d8:	461d      	mov	r5, r3
 80034da:	eb14 030a 	adds.w	r3, r4, sl
 80034de:	603b      	str	r3, [r7, #0]
 80034e0:	eb45 030b 	adc.w	r3, r5, fp
 80034e4:	607b      	str	r3, [r7, #4]
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	f04f 0300 	mov.w	r3, #0
 80034ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034f2:	4629      	mov	r1, r5
 80034f4:	028b      	lsls	r3, r1, #10
 80034f6:	4621      	mov	r1, r4
 80034f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034fc:	4621      	mov	r1, r4
 80034fe:	028a      	lsls	r2, r1, #10
 8003500:	4610      	mov	r0, r2
 8003502:	4619      	mov	r1, r3
 8003504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003506:	2200      	movs	r2, #0
 8003508:	60bb      	str	r3, [r7, #8]
 800350a:	60fa      	str	r2, [r7, #12]
 800350c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003510:	f7fc fe6c 	bl	80001ec <__aeabi_uldivmod>
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	4613      	mov	r3, r2
 800351a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800351c:	4b0b      	ldr	r3, [pc, #44]	; (800354c <HAL_RCC_GetSysClockFreq+0x180>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	0c1b      	lsrs	r3, r3, #16
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	3301      	adds	r3, #1
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800352c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800352e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003530:	fbb2 f3f3 	udiv	r3, r2, r3
 8003534:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003536:	e002      	b.n	800353e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003538:	4b05      	ldr	r3, [pc, #20]	; (8003550 <HAL_RCC_GetSysClockFreq+0x184>)
 800353a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800353c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800353e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003540:	4618      	mov	r0, r3
 8003542:	3740      	adds	r7, #64	; 0x40
 8003544:	46bd      	mov	sp, r7
 8003546:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800354a:	bf00      	nop
 800354c:	40023800 	.word	0x40023800
 8003550:	00f42400 	.word	0x00f42400
 8003554:	017d7840 	.word	0x017d7840

08003558 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e07b      	b.n	8003662 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	2b00      	cmp	r3, #0
 8003570:	d108      	bne.n	8003584 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800357a:	d009      	beq.n	8003590 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	61da      	str	r2, [r3, #28]
 8003582:	e005      	b.n	8003590 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d106      	bne.n	80035b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7fe fa42 	bl	8001a34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80035d8:	431a      	orrs	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	431a      	orrs	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003600:	431a      	orrs	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003614:	ea42 0103 	orr.w	r1, r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	0c1b      	lsrs	r3, r3, #16
 800362e:	f003 0104 	and.w	r1, r3, #4
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	f003 0210 	and.w	r2, r3, #16
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	69da      	ldr	r2, [r3, #28]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003650:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b088      	sub	sp, #32
 800366e:	af00      	add	r7, sp, #0
 8003670:	60f8      	str	r0, [r7, #12]
 8003672:	60b9      	str	r1, [r7, #8]
 8003674:	603b      	str	r3, [r7, #0]
 8003676:	4613      	mov	r3, r2
 8003678:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <HAL_SPI_Transmit+0x22>
 8003688:	2302      	movs	r3, #2
 800368a:	e126      	b.n	80038da <HAL_SPI_Transmit+0x270>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003694:	f7fe fbe4 	bl	8001e60 <HAL_GetTick>
 8003698:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800369a:	88fb      	ldrh	r3, [r7, #6]
 800369c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d002      	beq.n	80036b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80036aa:	2302      	movs	r3, #2
 80036ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036ae:	e10b      	b.n	80038c8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d002      	beq.n	80036bc <HAL_SPI_Transmit+0x52>
 80036b6:	88fb      	ldrh	r3, [r7, #6]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d102      	bne.n	80036c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036c0:	e102      	b.n	80038c8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2203      	movs	r2, #3
 80036c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	88fa      	ldrh	r2, [r7, #6]
 80036da:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	88fa      	ldrh	r2, [r7, #6]
 80036e0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003708:	d10f      	bne.n	800372a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003718:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003728:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003734:	2b40      	cmp	r3, #64	; 0x40
 8003736:	d007      	beq.n	8003748 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003746:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003750:	d14b      	bne.n	80037ea <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d002      	beq.n	8003760 <HAL_SPI_Transmit+0xf6>
 800375a:	8afb      	ldrh	r3, [r7, #22]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d13e      	bne.n	80037de <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003764:	881a      	ldrh	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003770:	1c9a      	adds	r2, r3, #2
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800377a:	b29b      	uxth	r3, r3
 800377c:	3b01      	subs	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003784:	e02b      	b.n	80037de <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b02      	cmp	r3, #2
 8003792:	d112      	bne.n	80037ba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003798:	881a      	ldrh	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a4:	1c9a      	adds	r2, r3, #2
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80037b8:	e011      	b.n	80037de <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037ba:	f7fe fb51 	bl	8001e60 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d803      	bhi.n	80037d2 <HAL_SPI_Transmit+0x168>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d0:	d102      	bne.n	80037d8 <HAL_SPI_Transmit+0x16e>
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d102      	bne.n	80037de <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037dc:	e074      	b.n	80038c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1ce      	bne.n	8003786 <HAL_SPI_Transmit+0x11c>
 80037e8:	e04c      	b.n	8003884 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <HAL_SPI_Transmit+0x18e>
 80037f2:	8afb      	ldrh	r3, [r7, #22]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d140      	bne.n	800387a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	330c      	adds	r3, #12
 8003802:	7812      	ldrb	r2, [r2, #0]
 8003804:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	1c5a      	adds	r2, r3, #1
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003814:	b29b      	uxth	r3, r3
 8003816:	3b01      	subs	r3, #1
 8003818:	b29a      	uxth	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800381e:	e02c      	b.n	800387a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b02      	cmp	r3, #2
 800382c:	d113      	bne.n	8003856 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	330c      	adds	r3, #12
 8003838:	7812      	ldrb	r2, [r2, #0]
 800383a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003840:	1c5a      	adds	r2, r3, #1
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800384a:	b29b      	uxth	r3, r3
 800384c:	3b01      	subs	r3, #1
 800384e:	b29a      	uxth	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	86da      	strh	r2, [r3, #54]	; 0x36
 8003854:	e011      	b.n	800387a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003856:	f7fe fb03 	bl	8001e60 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d803      	bhi.n	800386e <HAL_SPI_Transmit+0x204>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386c:	d102      	bne.n	8003874 <HAL_SPI_Transmit+0x20a>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d102      	bne.n	800387a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003878:	e026      	b.n	80038c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800387e:	b29b      	uxth	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1cd      	bne.n	8003820 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	6839      	ldr	r1, [r7, #0]
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 f8b3 	bl	80039f4 <SPI_EndRxTxTransaction>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2220      	movs	r2, #32
 8003898:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10a      	bne.n	80038b8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038a2:	2300      	movs	r3, #0
 80038a4:	613b      	str	r3, [r7, #16]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	613b      	str	r3, [r7, #16]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	613b      	str	r3, [r7, #16]
 80038b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d002      	beq.n	80038c6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	77fb      	strb	r3, [r7, #31]
 80038c4:	e000      	b.n	80038c8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80038c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80038d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3720      	adds	r7, #32
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
	...

080038e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b088      	sub	sp, #32
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	603b      	str	r3, [r7, #0]
 80038f0:	4613      	mov	r3, r2
 80038f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80038f4:	f7fe fab4 	bl	8001e60 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fc:	1a9b      	subs	r3, r3, r2
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	4413      	add	r3, r2
 8003902:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003904:	f7fe faac 	bl	8001e60 <HAL_GetTick>
 8003908:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800390a:	4b39      	ldr	r3, [pc, #228]	; (80039f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	015b      	lsls	r3, r3, #5
 8003910:	0d1b      	lsrs	r3, r3, #20
 8003912:	69fa      	ldr	r2, [r7, #28]
 8003914:	fb02 f303 	mul.w	r3, r2, r3
 8003918:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800391a:	e054      	b.n	80039c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003922:	d050      	beq.n	80039c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003924:	f7fe fa9c 	bl	8001e60 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	69fa      	ldr	r2, [r7, #28]
 8003930:	429a      	cmp	r2, r3
 8003932:	d902      	bls.n	800393a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d13d      	bne.n	80039b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003948:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003952:	d111      	bne.n	8003978 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800395c:	d004      	beq.n	8003968 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003966:	d107      	bne.n	8003978 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003976:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003980:	d10f      	bne.n	80039a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003990:	601a      	str	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e017      	b.n	80039e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	4013      	ands	r3, r2
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	bf0c      	ite	eq
 80039d6:	2301      	moveq	r3, #1
 80039d8:	2300      	movne	r3, #0
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	461a      	mov	r2, r3
 80039de:	79fb      	ldrb	r3, [r7, #7]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d19b      	bne.n	800391c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3720      	adds	r7, #32
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	20000010 	.word	0x20000010

080039f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b088      	sub	sp, #32
 80039f8:	af02      	add	r7, sp, #8
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003a00:	4b1b      	ldr	r3, [pc, #108]	; (8003a70 <SPI_EndRxTxTransaction+0x7c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a1b      	ldr	r2, [pc, #108]	; (8003a74 <SPI_EndRxTxTransaction+0x80>)
 8003a06:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0a:	0d5b      	lsrs	r3, r3, #21
 8003a0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a10:	fb02 f303 	mul.w	r3, r2, r3
 8003a14:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a1e:	d112      	bne.n	8003a46 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2200      	movs	r2, #0
 8003a28:	2180      	movs	r1, #128	; 0x80
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f7ff ff5a 	bl	80038e4 <SPI_WaitFlagStateUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d016      	beq.n	8003a64 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3a:	f043 0220 	orr.w	r2, r3, #32
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e00f      	b.n	8003a66 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00a      	beq.n	8003a62 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5c:	2b80      	cmp	r3, #128	; 0x80
 8003a5e:	d0f2      	beq.n	8003a46 <SPI_EndRxTxTransaction+0x52>
 8003a60:	e000      	b.n	8003a64 <SPI_EndRxTxTransaction+0x70>
        break;
 8003a62:	bf00      	nop
  }

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	20000010 	.word	0x20000010
 8003a74:	165e9f81 	.word	0x165e9f81

08003a78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e041      	b.n	8003b0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d106      	bne.n	8003aa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7fe f926 	bl	8001cf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3304      	adds	r3, #4
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4610      	mov	r0, r2
 8003ab8:	f000 faa0 	bl	8003ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
	...

08003b18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d001      	beq.n	8003b30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e04e      	b.n	8003bce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0201 	orr.w	r2, r2, #1
 8003b46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a23      	ldr	r2, [pc, #140]	; (8003bdc <HAL_TIM_Base_Start_IT+0xc4>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d022      	beq.n	8003b98 <HAL_TIM_Base_Start_IT+0x80>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b5a:	d01d      	beq.n	8003b98 <HAL_TIM_Base_Start_IT+0x80>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a1f      	ldr	r2, [pc, #124]	; (8003be0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d018      	beq.n	8003b98 <HAL_TIM_Base_Start_IT+0x80>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a1e      	ldr	r2, [pc, #120]	; (8003be4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d013      	beq.n	8003b98 <HAL_TIM_Base_Start_IT+0x80>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a1c      	ldr	r2, [pc, #112]	; (8003be8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00e      	beq.n	8003b98 <HAL_TIM_Base_Start_IT+0x80>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a1b      	ldr	r2, [pc, #108]	; (8003bec <HAL_TIM_Base_Start_IT+0xd4>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d009      	beq.n	8003b98 <HAL_TIM_Base_Start_IT+0x80>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a19      	ldr	r2, [pc, #100]	; (8003bf0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d004      	beq.n	8003b98 <HAL_TIM_Base_Start_IT+0x80>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a18      	ldr	r2, [pc, #96]	; (8003bf4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d111      	bne.n	8003bbc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 0307 	and.w	r3, r3, #7
 8003ba2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2b06      	cmp	r3, #6
 8003ba8:	d010      	beq.n	8003bcc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f042 0201 	orr.w	r2, r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bba:	e007      	b.n	8003bcc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f042 0201 	orr.w	r2, r2, #1
 8003bca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	40010000 	.word	0x40010000
 8003be0:	40000400 	.word	0x40000400
 8003be4:	40000800 	.word	0x40000800
 8003be8:	40000c00 	.word	0x40000c00
 8003bec:	40010400 	.word	0x40010400
 8003bf0:	40014000 	.word	0x40014000
 8003bf4:	40001800 	.word	0x40001800

08003bf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d122      	bne.n	8003c54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d11b      	bne.n	8003c54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f06f 0202 	mvn.w	r2, #2
 8003c24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	f003 0303 	and.w	r3, r3, #3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f9bf 	bl	8003fbe <HAL_TIM_IC_CaptureCallback>
 8003c40:	e005      	b.n	8003c4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f9b1 	bl	8003faa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 f9c2 	bl	8003fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	f003 0304 	and.w	r3, r3, #4
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d122      	bne.n	8003ca8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b04      	cmp	r3, #4
 8003c6e:	d11b      	bne.n	8003ca8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f06f 0204 	mvn.w	r2, #4
 8003c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f995 	bl	8003fbe <HAL_TIM_IC_CaptureCallback>
 8003c94:	e005      	b.n	8003ca2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f987 	bl	8003faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 f998 	bl	8003fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b08      	cmp	r3, #8
 8003cb4:	d122      	bne.n	8003cfc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f003 0308 	and.w	r3, r3, #8
 8003cc0:	2b08      	cmp	r3, #8
 8003cc2:	d11b      	bne.n	8003cfc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f06f 0208 	mvn.w	r2, #8
 8003ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2204      	movs	r2, #4
 8003cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	f003 0303 	and.w	r3, r3, #3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f96b 	bl	8003fbe <HAL_TIM_IC_CaptureCallback>
 8003ce8:	e005      	b.n	8003cf6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f95d 	bl	8003faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f96e 	bl	8003fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	f003 0310 	and.w	r3, r3, #16
 8003d06:	2b10      	cmp	r3, #16
 8003d08:	d122      	bne.n	8003d50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f003 0310 	and.w	r3, r3, #16
 8003d14:	2b10      	cmp	r3, #16
 8003d16:	d11b      	bne.n	8003d50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f06f 0210 	mvn.w	r2, #16
 8003d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2208      	movs	r2, #8
 8003d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f941 	bl	8003fbe <HAL_TIM_IC_CaptureCallback>
 8003d3c:	e005      	b.n	8003d4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f933 	bl	8003faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 f944 	bl	8003fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d10e      	bne.n	8003d7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d107      	bne.n	8003d7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f06f 0201 	mvn.w	r2, #1
 8003d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f90d 	bl	8003f96 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d86:	2b80      	cmp	r3, #128	; 0x80
 8003d88:	d10e      	bne.n	8003da8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d94:	2b80      	cmp	r3, #128	; 0x80
 8003d96:	d107      	bne.n	8003da8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 faea 	bl	800437c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db2:	2b40      	cmp	r3, #64	; 0x40
 8003db4:	d10e      	bne.n	8003dd4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc0:	2b40      	cmp	r3, #64	; 0x40
 8003dc2:	d107      	bne.n	8003dd4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f909 	bl	8003fe6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	f003 0320 	and.w	r3, r3, #32
 8003dde:	2b20      	cmp	r3, #32
 8003de0:	d10e      	bne.n	8003e00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f003 0320 	and.w	r3, r3, #32
 8003dec:	2b20      	cmp	r3, #32
 8003dee:	d107      	bne.n	8003e00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f06f 0220 	mvn.w	r2, #32
 8003df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 fab4 	bl	8004368 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e00:	bf00      	nop
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e12:	2300      	movs	r3, #0
 8003e14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d101      	bne.n	8003e24 <HAL_TIM_ConfigClockSource+0x1c>
 8003e20:	2302      	movs	r3, #2
 8003e22:	e0b4      	b.n	8003f8e <HAL_TIM_ConfigClockSource+0x186>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e5c:	d03e      	beq.n	8003edc <HAL_TIM_ConfigClockSource+0xd4>
 8003e5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e62:	f200 8087 	bhi.w	8003f74 <HAL_TIM_ConfigClockSource+0x16c>
 8003e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e6a:	f000 8086 	beq.w	8003f7a <HAL_TIM_ConfigClockSource+0x172>
 8003e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e72:	d87f      	bhi.n	8003f74 <HAL_TIM_ConfigClockSource+0x16c>
 8003e74:	2b70      	cmp	r3, #112	; 0x70
 8003e76:	d01a      	beq.n	8003eae <HAL_TIM_ConfigClockSource+0xa6>
 8003e78:	2b70      	cmp	r3, #112	; 0x70
 8003e7a:	d87b      	bhi.n	8003f74 <HAL_TIM_ConfigClockSource+0x16c>
 8003e7c:	2b60      	cmp	r3, #96	; 0x60
 8003e7e:	d050      	beq.n	8003f22 <HAL_TIM_ConfigClockSource+0x11a>
 8003e80:	2b60      	cmp	r3, #96	; 0x60
 8003e82:	d877      	bhi.n	8003f74 <HAL_TIM_ConfigClockSource+0x16c>
 8003e84:	2b50      	cmp	r3, #80	; 0x50
 8003e86:	d03c      	beq.n	8003f02 <HAL_TIM_ConfigClockSource+0xfa>
 8003e88:	2b50      	cmp	r3, #80	; 0x50
 8003e8a:	d873      	bhi.n	8003f74 <HAL_TIM_ConfigClockSource+0x16c>
 8003e8c:	2b40      	cmp	r3, #64	; 0x40
 8003e8e:	d058      	beq.n	8003f42 <HAL_TIM_ConfigClockSource+0x13a>
 8003e90:	2b40      	cmp	r3, #64	; 0x40
 8003e92:	d86f      	bhi.n	8003f74 <HAL_TIM_ConfigClockSource+0x16c>
 8003e94:	2b30      	cmp	r3, #48	; 0x30
 8003e96:	d064      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0x15a>
 8003e98:	2b30      	cmp	r3, #48	; 0x30
 8003e9a:	d86b      	bhi.n	8003f74 <HAL_TIM_ConfigClockSource+0x16c>
 8003e9c:	2b20      	cmp	r3, #32
 8003e9e:	d060      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0x15a>
 8003ea0:	2b20      	cmp	r3, #32
 8003ea2:	d867      	bhi.n	8003f74 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d05c      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0x15a>
 8003ea8:	2b10      	cmp	r3, #16
 8003eaa:	d05a      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0x15a>
 8003eac:	e062      	b.n	8003f74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6818      	ldr	r0, [r3, #0]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	6899      	ldr	r1, [r3, #8]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f000 f9b7 	bl	8004230 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ed0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	609a      	str	r2, [r3, #8]
      break;
 8003eda:	e04f      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6818      	ldr	r0, [r3, #0]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	6899      	ldr	r1, [r3, #8]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f000 f9a0 	bl	8004230 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003efe:	609a      	str	r2, [r3, #8]
      break;
 8003f00:	e03c      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6818      	ldr	r0, [r3, #0]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	6859      	ldr	r1, [r3, #4]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f000 f914 	bl	800413c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2150      	movs	r1, #80	; 0x50
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 f96d 	bl	80041fa <TIM_ITRx_SetConfig>
      break;
 8003f20:	e02c      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6818      	ldr	r0, [r3, #0]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	6859      	ldr	r1, [r3, #4]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f000 f933 	bl	800419a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2160      	movs	r1, #96	; 0x60
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 f95d 	bl	80041fa <TIM_ITRx_SetConfig>
      break;
 8003f40:	e01c      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6818      	ldr	r0, [r3, #0]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	6859      	ldr	r1, [r3, #4]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	f000 f8f4 	bl	800413c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2140      	movs	r1, #64	; 0x40
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 f94d 	bl	80041fa <TIM_ITRx_SetConfig>
      break;
 8003f60:	e00c      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	f000 f944 	bl	80041fa <TIM_ITRx_SetConfig>
      break;
 8003f72:	e003      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	73fb      	strb	r3, [r7, #15]
      break;
 8003f78:	e000      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
	...

08003ffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a40      	ldr	r2, [pc, #256]	; (8004110 <TIM_Base_SetConfig+0x114>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d013      	beq.n	800403c <TIM_Base_SetConfig+0x40>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800401a:	d00f      	beq.n	800403c <TIM_Base_SetConfig+0x40>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a3d      	ldr	r2, [pc, #244]	; (8004114 <TIM_Base_SetConfig+0x118>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d00b      	beq.n	800403c <TIM_Base_SetConfig+0x40>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a3c      	ldr	r2, [pc, #240]	; (8004118 <TIM_Base_SetConfig+0x11c>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d007      	beq.n	800403c <TIM_Base_SetConfig+0x40>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a3b      	ldr	r2, [pc, #236]	; (800411c <TIM_Base_SetConfig+0x120>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d003      	beq.n	800403c <TIM_Base_SetConfig+0x40>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a3a      	ldr	r2, [pc, #232]	; (8004120 <TIM_Base_SetConfig+0x124>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d108      	bne.n	800404e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004042:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	4313      	orrs	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a2f      	ldr	r2, [pc, #188]	; (8004110 <TIM_Base_SetConfig+0x114>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d02b      	beq.n	80040ae <TIM_Base_SetConfig+0xb2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800405c:	d027      	beq.n	80040ae <TIM_Base_SetConfig+0xb2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a2c      	ldr	r2, [pc, #176]	; (8004114 <TIM_Base_SetConfig+0x118>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d023      	beq.n	80040ae <TIM_Base_SetConfig+0xb2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a2b      	ldr	r2, [pc, #172]	; (8004118 <TIM_Base_SetConfig+0x11c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d01f      	beq.n	80040ae <TIM_Base_SetConfig+0xb2>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a2a      	ldr	r2, [pc, #168]	; (800411c <TIM_Base_SetConfig+0x120>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d01b      	beq.n	80040ae <TIM_Base_SetConfig+0xb2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a29      	ldr	r2, [pc, #164]	; (8004120 <TIM_Base_SetConfig+0x124>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d017      	beq.n	80040ae <TIM_Base_SetConfig+0xb2>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a28      	ldr	r2, [pc, #160]	; (8004124 <TIM_Base_SetConfig+0x128>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d013      	beq.n	80040ae <TIM_Base_SetConfig+0xb2>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a27      	ldr	r2, [pc, #156]	; (8004128 <TIM_Base_SetConfig+0x12c>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d00f      	beq.n	80040ae <TIM_Base_SetConfig+0xb2>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a26      	ldr	r2, [pc, #152]	; (800412c <TIM_Base_SetConfig+0x130>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d00b      	beq.n	80040ae <TIM_Base_SetConfig+0xb2>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a25      	ldr	r2, [pc, #148]	; (8004130 <TIM_Base_SetConfig+0x134>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d007      	beq.n	80040ae <TIM_Base_SetConfig+0xb2>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a24      	ldr	r2, [pc, #144]	; (8004134 <TIM_Base_SetConfig+0x138>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d003      	beq.n	80040ae <TIM_Base_SetConfig+0xb2>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a23      	ldr	r2, [pc, #140]	; (8004138 <TIM_Base_SetConfig+0x13c>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d108      	bne.n	80040c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	4313      	orrs	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a0a      	ldr	r2, [pc, #40]	; (8004110 <TIM_Base_SetConfig+0x114>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d003      	beq.n	80040f4 <TIM_Base_SetConfig+0xf8>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a0c      	ldr	r2, [pc, #48]	; (8004120 <TIM_Base_SetConfig+0x124>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d103      	bne.n	80040fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	691a      	ldr	r2, [r3, #16]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	615a      	str	r2, [r3, #20]
}
 8004102:	bf00      	nop
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	40010000 	.word	0x40010000
 8004114:	40000400 	.word	0x40000400
 8004118:	40000800 	.word	0x40000800
 800411c:	40000c00 	.word	0x40000c00
 8004120:	40010400 	.word	0x40010400
 8004124:	40014000 	.word	0x40014000
 8004128:	40014400 	.word	0x40014400
 800412c:	40014800 	.word	0x40014800
 8004130:	40001800 	.word	0x40001800
 8004134:	40001c00 	.word	0x40001c00
 8004138:	40002000 	.word	0x40002000

0800413c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	f023 0201 	bic.w	r2, r3, #1
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004166:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	4313      	orrs	r3, r2
 8004170:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f023 030a 	bic.w	r3, r3, #10
 8004178:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	4313      	orrs	r3, r2
 8004180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	621a      	str	r2, [r3, #32]
}
 800418e:	bf00      	nop
 8004190:	371c      	adds	r7, #28
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800419a:	b480      	push	{r7}
 800419c:	b087      	sub	sp, #28
 800419e:	af00      	add	r7, sp, #0
 80041a0:	60f8      	str	r0, [r7, #12]
 80041a2:	60b9      	str	r1, [r7, #8]
 80041a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	f023 0210 	bic.w	r2, r3, #16
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	031b      	lsls	r3, r3, #12
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	011b      	lsls	r3, r3, #4
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	4313      	orrs	r3, r2
 80041e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	621a      	str	r2, [r3, #32]
}
 80041ee:	bf00      	nop
 80041f0:	371c      	adds	r7, #28
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b085      	sub	sp, #20
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
 8004202:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004210:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4313      	orrs	r3, r2
 8004218:	f043 0307 	orr.w	r3, r3, #7
 800421c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	609a      	str	r2, [r3, #8]
}
 8004224:	bf00      	nop
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004230:	b480      	push	{r7}
 8004232:	b087      	sub	sp, #28
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
 800423c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800424a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	021a      	lsls	r2, r3, #8
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	431a      	orrs	r2, r3
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	4313      	orrs	r3, r2
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	4313      	orrs	r3, r2
 800425c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	609a      	str	r2, [r3, #8]
}
 8004264:	bf00      	nop
 8004266:	371c      	adds	r7, #28
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004280:	2b01      	cmp	r3, #1
 8004282:	d101      	bne.n	8004288 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004284:	2302      	movs	r3, #2
 8004286:	e05a      	b.n	800433e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a21      	ldr	r2, [pc, #132]	; (800434c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d022      	beq.n	8004312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d4:	d01d      	beq.n	8004312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a1d      	ldr	r2, [pc, #116]	; (8004350 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d018      	beq.n	8004312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a1b      	ldr	r2, [pc, #108]	; (8004354 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d013      	beq.n	8004312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a1a      	ldr	r2, [pc, #104]	; (8004358 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d00e      	beq.n	8004312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a18      	ldr	r2, [pc, #96]	; (800435c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d009      	beq.n	8004312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a17      	ldr	r2, [pc, #92]	; (8004360 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d004      	beq.n	8004312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a15      	ldr	r2, [pc, #84]	; (8004364 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d10c      	bne.n	800432c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004318:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	4313      	orrs	r3, r2
 8004322:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	40010000 	.word	0x40010000
 8004350:	40000400 	.word	0x40000400
 8004354:	40000800 	.word	0x40000800
 8004358:	40000c00 	.word	0x40000c00
 800435c:	40010400 	.word	0x40010400
 8004360:	40014000 	.word	0x40014000
 8004364:	40001800 	.word	0x40001800

08004368 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <__libc_init_array>:
 8004390:	b570      	push	{r4, r5, r6, lr}
 8004392:	4d0d      	ldr	r5, [pc, #52]	; (80043c8 <__libc_init_array+0x38>)
 8004394:	4c0d      	ldr	r4, [pc, #52]	; (80043cc <__libc_init_array+0x3c>)
 8004396:	1b64      	subs	r4, r4, r5
 8004398:	10a4      	asrs	r4, r4, #2
 800439a:	2600      	movs	r6, #0
 800439c:	42a6      	cmp	r6, r4
 800439e:	d109      	bne.n	80043b4 <__libc_init_array+0x24>
 80043a0:	4d0b      	ldr	r5, [pc, #44]	; (80043d0 <__libc_init_array+0x40>)
 80043a2:	4c0c      	ldr	r4, [pc, #48]	; (80043d4 <__libc_init_array+0x44>)
 80043a4:	f000 f820 	bl	80043e8 <_init>
 80043a8:	1b64      	subs	r4, r4, r5
 80043aa:	10a4      	asrs	r4, r4, #2
 80043ac:	2600      	movs	r6, #0
 80043ae:	42a6      	cmp	r6, r4
 80043b0:	d105      	bne.n	80043be <__libc_init_array+0x2e>
 80043b2:	bd70      	pop	{r4, r5, r6, pc}
 80043b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80043b8:	4798      	blx	r3
 80043ba:	3601      	adds	r6, #1
 80043bc:	e7ee      	b.n	800439c <__libc_init_array+0xc>
 80043be:	f855 3b04 	ldr.w	r3, [r5], #4
 80043c2:	4798      	blx	r3
 80043c4:	3601      	adds	r6, #1
 80043c6:	e7f2      	b.n	80043ae <__libc_init_array+0x1e>
 80043c8:	08004418 	.word	0x08004418
 80043cc:	08004418 	.word	0x08004418
 80043d0:	08004418 	.word	0x08004418
 80043d4:	0800441c 	.word	0x0800441c

080043d8 <memset>:
 80043d8:	4402      	add	r2, r0
 80043da:	4603      	mov	r3, r0
 80043dc:	4293      	cmp	r3, r2
 80043de:	d100      	bne.n	80043e2 <memset+0xa>
 80043e0:	4770      	bx	lr
 80043e2:	f803 1b01 	strb.w	r1, [r3], #1
 80043e6:	e7f9      	b.n	80043dc <memset+0x4>

080043e8 <_init>:
 80043e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ea:	bf00      	nop
 80043ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ee:	bc08      	pop	{r3}
 80043f0:	469e      	mov	lr, r3
 80043f2:	4770      	bx	lr

080043f4 <_fini>:
 80043f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f6:	bf00      	nop
 80043f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043fa:	bc08      	pop	{r3}
 80043fc:	469e      	mov	lr, r3
 80043fe:	4770      	bx	lr
